#line 2 "W:\\modules\\vhdl_xhdl\\lex.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /work/CVS_BASE/XHDL_studio/API/lex.yy.cpp,v 1.1.1.1 2009-08-24 21:31:55 walid Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;
extern char yytext[];


static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, yytext_ptr, yyleng + 1 ); \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 115
#define YY_END_OF_BUFFER 116
static yyconst short int yy_acclist[548] =
    {   0,
      116,  114,  115,    1,  114,  115,  112,  115,   23,  114,
      115,  114,  115,  114,  115,    2,  114,  115,    3,  114,
      115,    4,  114,  115,    5,  114,  115,    7,  114,  115,
        8,  114,  115,    9,  114,  115,   10,  114,  115,   24,
      114,  115,   25,  114,  115,  108,  114,  115,   12,  114,
      115,   13,  114,  115,   16,  114,  115,   18,  114,  115,
       17,  114,  115,  107,  114,  115,  107,  114,  115,  107,
      114,  115,  107,  114,  115,  107,  114,  115,  107,  114,
      115,  107,  114,  115,  107,  114,  115,  107,  114,  115,
      107,  114,  115,  107,  114,  115,  107,  114,  115,  107,

      114,  115,  107,  114,  115,  107,  114,  115,  107,  114,
      115,  107,  114,  115,  107,  114,  115,  107,  114,  115,
      107,  114,  115,  107,  114,  115,  107,  114,  115,   22,
      114,  115,  110,  110,    6,16497,   19,  108,   11,   14,
       21,   20,   15,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,   59,  107,
       60,  107,   62,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,   75,  107,   76,  107,  107,   26,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,   95,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  109,16497, 8305,  108,  108,   27,  107,  107,
      107,  107,   31,  107,   32,  107,  107,  107,  107,  107,
      107,  107,  107,  107,   41,  107,  107,  107,  107,  107,
      107,  107,   50,  107,  107,  107,  107,   54,  107,  107,
      107,  107,  107,  107,  107,  107,  107,   67,  107,   68,
      107,  107,   70,  107,  107,   72,  107,   73,  107,  107,
      107,  107,   79,  107,  107,  107,  107,  107,  107,  107,
       87,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  100,  107,  107,  107,  107,  107,  107,

      106,  107,  108,  108,  108,  108,  111,  107,  107,  107,
      107,  107,  107,  107,  107,  107,   39,  107,  107,   42,
      107,  107,  107,  107,  107,  107,   48,  107,  107,  107,
       52,  107,   53,  107,  107,  107,  107,  107,  107,  107,
      107,   66,  107,   69,  107,   71,  107,   74,  107,   77,
      107,  107,  107,   81,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,   94,  107,  107,   97,  107,
      107,  107,  107,  102,  107,  103,  107,  107,  105,  107,
      107,   29,  107,   30,  107,  107,   34,  107,  107,  107,
       37,  107,   38,  107,  107,  107,  107,  107,  107,  107,

       49,  107,  107,  107,  107,  107,   61,  107,   63,  107,
      107,  107,  107,  107,  107,   84,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,   98,  107,   99,  107,
      107,  104,  107,  108,  108,   28,  107,  107,   35,  107,
      107,   40,  107,  107,  107,  107,  107,   47,  107,   51,
      107,  107,  107,  107,  107,  107,  107,   78,  107,  107,
      107,  107,   85,  107,  107,   88,  107,   89,  107,   90,
      107,  107,   92,  107,  107,  107,  107,  108,  108,  107,
      107,  107,  107,  107,  107,  107,  107,   57,  107,   58,
      107,   64,  107,   65,  107,   80,  107,  107,   83,  107,

      107,  107,   93,  107,  107,  107,  107,  107,  107,  107,
       45,  107,  107,   55,  107,   56,  107,  107,   86,  107,
       91,  107,  107,  101,  107,  107,   36,  107,   43,  107,
      107,  107,   82,  107,   96,  107,  107,  107,   46,  107,
      107,  107,   33,  107,  107,   44,  107
    } ;

static yyconst short int yy_accept[425] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   14,   16,
       19,   22,   25,   28,   31,   34,   37,   40,   43,   46,
       49,   52,   55,   58,   61,   64,   67,   70,   73,   76,
       79,   82,   85,   88,   91,   94,   97,  100,  103,  106,
      109,  112,  115,  118,  121,  124,  127,  130,  133,  133,
      134,  134,  135,  135,  136,  137,  138,  138,  138,  139,
      139,  139,  139,  140,  141,  142,  143,  144,  145,  145,
      145,  145,  146,  147,  148,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      164,  165,  166,  167,  168,  169,  171,  173,  175,  176,

      177,  178,  179,  180,  181,  182,  183,  184,  186,  188,
      189,  191,  192,  193,  194,  195,  196,  197,  198,  199,
      200,  201,  202,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  214,  215,  216,  216,  217,  217,  217,
      218,  218,  218,  220,  221,  222,  223,  225,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  237,  238,  239,
      240,  241,  242,  243,  245,  246,  247,  248,  250,  251,
      252,  253,  254,  255,  256,  257,  258,  260,  262,  263,
      265,  266,  268,  270,  271,  272,  273,  275,  276,  277,
      278,  279,  280,  281,  283,  284,  285,  286,  287,  288,

      289,  290,  291,  292,  293,  294,  296,  297,  298,  299,
      300,  301,  303,  304,  304,  304,  304,  305,  305,  305,
      305,  306,  306,  307,  307,  308,  308,  308,  308,  308,
      309,  310,  311,  312,  313,  314,  315,  316,  317,  319,
      320,  322,  323,  324,  325,  326,  327,  329,  330,  331,
      333,  335,  336,  337,  338,  339,  340,  341,  342,  344,
      346,  348,  350,  352,  353,  354,  356,  357,  358,  359,
      360,  361,  362,  363,  364,  365,  366,  368,  369,  371,
      372,  373,  374,  376,  378,  379,  381,  381,  381,  381,
      381,  382,  384,  386,  387,  389,  390,  391,  393,  395,

      396,  397,  398,  399,  400,  401,  403,  404,  405,  406,
      407,  409,  411,  412,  413,  414,  415,  416,  418,  419,
      420,  421,  422,  423,  424,  425,  426,  427,  429,  431,
      432,  434,  434,  435,  435,  435,  435,  435,  435,  436,
      438,  439,  441,  442,  444,  445,  446,  447,  448,  450,
      452,  453,  454,  455,  456,  457,  458,  460,  461,  462,
      463,  465,  466,  468,  470,  472,  473,  475,  476,  477,
      478,  479,  479,  480,  480,  481,  482,  483,  484,  485,
      486,  487,  488,  490,  492,  494,  496,  498,  499,  501,
      502,  503,  505,  506,  507,  508,  509,  510,  511,  513,

      514,  516,  518,  519,  521,  523,  524,  526,  527,  529,
      531,  532,  533,  535,  537,  538,  539,  541,  542,  543,
      545,  546,  548,  548
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    7,    7,   25,   26,   25,   25,   27,   25,
       28,   28,   28,   28,   28,   28,   28,   28,   29,   28,
       28,   28,   28,   28,   28,   28,   28,   30,   28,   28,
        7,    7,    7,    7,   31,    7,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   41,   48,   49,   50,   51,   52,   53,   54,
       55,   41,    7,   56,    7,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[57] =
    {   0,
        1,    2,    1,    2,    3,    4,    2,    5,    2,    2,
        2,    2,    2,    2,    2,    2,    6,    2,    7,    8,
        2,    2,    2,    2,    7,    7,    7,    9,    9,    9,
       10,    7,    7,    7,    7,    7,    7,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    2
    } ;

static yyconst short int yy_base[441] =
    {   0,
        0,    0,  886,  887,  887,  887,  887,  880,  876,  887,
        0,  887,  887,  870,  887,  887,  866,  887,  858,   51,
      857,  887,   35,  855,  855,  846,   55,   57,   67,   30,
       33,   38,   34,   53,   77,   84,   65,   89,  136,   97,
      100,  102,  108,   78,   35,  118,  129,  887,  871,  870,
      866,  865,  862,  887,  868,  887,    0,  851,  149,    0,
      132,  850,  887,  887,  887,  887,  887,  837,  836,    0,
        0,   46,  128,   62,  121,  139,  148,   68,  140,  134,
      146,  158,  157,   70,  160,  164,  147,  166,  167,  168,
      176,  170,  178,  179,  180,  835,  183,  834,  189,  194,

      185,  190,  195,  197,  201,  202,  203,  833,  832,  204,
      831,  205,  207,  214,  210,  216,  218,  222,  228,  230,
      234,  239,  830,  242,  245,  246,  247,  233,  248,  251,
      253,  254,  887,  857,  887,  283,  274,  277,  840,  276,
      285,  290,  827,  268,  275,  281,  826,  825,  212,  286,
      284,  278,  288,  291,  292,  293,  824,  296,  298,  300,
      302,  303,  304,  823,  310,  307,  315,  822,  308,  322,
      312,  321,  323,  325,  324,  330,  821,  820,  332,  819,
      331,  818,  817,  333,  334,  338,  816,  340,  337,  344,
      352,  339,  349,  815,  353,  355,  357,  360,  363,  361,

      364,  367,  366,  369,  370,  814,  373,  372,  376,  374,
      384,  813,  389,    0,  412,  414,  405,  824,    0,  413,
      399,  417,  408,  823,  887,  409,  423,  430,  434,  415,
      418,  419,  416,  420,  421,  422,  426,  428,  810,  424,
      809,  427,  432,  436,  443,  445,  808,  446,  447,  807,
      806,  448,  451,  449,  450,  459,  456,  460,  805,  804,
      803,  802,  801,  462,  472,  800,  465,  475,  474,  463,
      476,  477,  482,  478,  483,  486,  799,  487,  798,  488,
      489,  496,  797,  796,  498,  795,  519,  515,  511,  529,
      508,  794,  793,  499,  792,  509,  519,  791,  790,  513,

      520,  516,  524,  522,  527,  789,  529,  531,  532,  538,
      788,  787,  535,  537,  539,  547,  545,  786,  546,  548,
      551,  555,  556,  559,  560,  558,  561,  785,  784,  562,
      783,  794,  578,  590,  596,  584,  587,  793,  591,  780,
      580,  779,  581,  778,  583,  582,  586,  589,  777,  776,
      592,  593,  594,  595,  598,  604,  775,  605,  606,  611,
      774,  608,  773,  772,  771,  614,  769,  615,  616,  618,
      635,  777,  636,  776,  625,  619,  627,  617,  621,  632,
      639,  642,  762,  761,  758,  757,  755,  643,  752,  644,
      645,  751,  646,  649,  648,  650,  651,  656,  749,  659,

      748,  747,  666,  744,  739,  658,  738,  652,  735,  721,
      664,  665,  691,  689,  668,  673,  688,  674,  675,  687,
      678,  686,  887,  722,  731,  740,  744,  754,  705,  704,
      700,  516,  761,  766,  774,  780,  478,  196,  787,  791
    } ;

static yyconst short int yy_def[441] =
    {   0,
      423,    1,  423,  423,  423,  423,  423,  424,  425,  423,
      426,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  423,  424,  423,
      425,  423,  423,  423,  428,  423,  429,  423,  423,  430,
      423,  423,  423,  423,  423,  423,  423,  427,  427,  431,
      432,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  423,  428,  423,  433,  423,  434,  423,  423,
      435,  436,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  423,  437,  433,  433,  423,  423,  438,  434,
      423,  434,  423,  423,  423,  435,  435,  436,  436,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  423,  439,  440,  423,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  423,  423,  439,  439,  440,  440,  423,  423,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      423,  423,  423,  423,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,    0,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423
    } ;

static yyconst short int yy_nxt[944] =
    {   0,
        4,    5,    6,    7,    8,    4,    4,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   26,   26,   27,   27,
        4,   28,   29,   30,   31,   32,   33,   34,   26,   35,
       26,   26,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   26,   48,   57,   64,   65,   70,
       69,   84,   71,   69,   69,   69,  128,   58,   69,   59,
       60,   70,   86,   91,   71,   85,   69,   61,   87,   92,
       88,   62,   89,   69,   93,   69,   61,   69,   94,   72,
       73,   90,   69,   74,  143,   69,  102,   69,   69,   75,

       69,   76,   80,   95,   77,   78,   79,   69,   69,   81,
      103,  145,   82,   96,   69,   99,  151,   83,  158,   69,
      104,   97,  126,  100,  105,   98,  127,   69,  114,  101,
       69,  117,   69,   70,  106,  118,   71,  119,   69,  107,
       70,  120,  115,   71,  116,  139,  122,  139,   69,  129,
      140,   69,  121,  123,   57,  124,  130,  131,   69,   69,
      146,  144,  125,  147,   69,   58,   69,   59,   60,   69,
       69,  153,  108,  148,  132,   61,   69,   69,   69,   62,
      109,  149,  110,  111,   61,  112,  113,   69,   69,  152,
       69,  154,  155,  156,   69,  150,   69,   69,   69,  162,

       69,  164,  289,  159,  160,  157,   69,  166,   69,   69,
       69,  171,  161,   69,  163,   69,  165,  168,  167,   69,
       69,  173,  169,  170,   69,   69,  174,   69,  172,  178,
      176,   69,   69,   69,   69,   69,  177,   69,  175,  185,
       69,  179,   69,  186,   69,  184,   69,  188,   69,  182,
      233,  183,   69,  180,  181,  192,  187,  189,   69,  193,
       69,  190,  191,   69,   69,  194,  200,  199,  195,   69,
      197,  196,   69,  202,  201,   69,   69,   69,   69,  198,
      207,   69,  206,   69,   69,  204,  209,  208,  213,  225,
      210,  203,  217,  219,  223,  205,  221,  225,   69,  214,

       61,  212,  211,  230,  218,   69,  224,  222,   69,   61,
      231,   69,  232,  216,   69,  227,   69,  234,   69,  235,
      229,   69,   69,   69,  238,  236,   69,  237,   69,  240,
       69,  241,   69,   69,   69,  245,  243,   69,   69,  247,
       69,  252,   69,  248,  242,   69,  239,  246,  244,  249,
      251,   69,   69,   69,   69,   69,  250,  253,  256,  254,
       69,   69,   69,   69,   69,  258,  260,   69,   69,   69,
       69,  255,  257,  264,   69,  262,  259,  267,  263,   69,
      261,  265,   69,   69,  269,   69,  266,   69,  270,  268,
       69,   69,  273,   69,   69,  274,   69,   69,  271,   69,

       69,  279,   69,   69,   69,  272,   69,  275,  277,  281,
      276,  278,  282,  225,   69,  287,  285,  213,  280,  423,
      284,  283,  286,  217,  287,  290,  223,  423,  214,  219,
      423,   61,  221,  423,  290,  218,  423,  225,  224,  227,
       61,  423,  216,  222,  423,   69,   69,  423,   69,   69,
       69,   69,   69,  423,   69,  294,   69,   69,   69,  300,
      229,  297,   69,  291,  423,  292,   69,  293,  296,  299,
      298,  302,  301,   69,  295,   69,   69,   69,   69,   69,
       69,   69,  306,  310,  288,  303,   69,  313,  304,   69,
       69,  314,   69,   69,  305,   69,  307,  308,  309,  311,

      317,  312,   69,  316,   69,   69,   69,   69,   69,  315,
      318,  320,   69,   69,  325,  323,   69,   69,   69,   69,
      213,  319,  142,  321,  322,  324,   69,  330,   69,   69,
      221,  329,  332,  331,  332,  327,  328,  333,   69,   69,
      326,  337,  338,   69,  338,  335,   69,  339,  341,   69,
       69,  343,   69,  346,   69,  347,  340,   69,  342,   69,
      344,   69,   69,  352,  345,   69,  348,   69,   69,   69,
      351,  353,  349,  354,  356,   69,   69,   69,   69,  359,
      361,   69,  355,  350,  358,   69,   69,  357,   69,   69,
       69,   69,   69,  360,  370,  213,  371,  362,  366,  364,

      363,  423,  367,  221,  368,  365,  423,  369,  372,  373,
       69,   69,   69,   69,  337,  375,   69,  423,  377,   69,
      335,  374,   69,   69,   69,   69,  423,  383,   69,  384,
      379,  376,  378,  380,   69,   69,   69,  381,   69,  386,
      387,   69,  382,  390,   69,   69,   69,   69,   69,   69,
      392,   69,  385,  371,  373,   69,  388,   69,  395,  389,
      394,  393,   69,  391,  398,  372,  374,  400,  396,   69,
      399,  397,   69,   69,   69,   69,   69,  402,   69,   69,
       69,   69,   69,  401,  407,  409,   69,  411,   69,   69,
      403,  404,  412,  406,   69,   69,   69,  408,   69,  405,

      410,  413,  415,   69,   69,   69,  141,  414,   69,  420,
      138,  136,  419,  416,  417,  418,   69,   69,   69,   69,
      421,   69,  422,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       68,   69,   68,   68,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  215,   69,  215,  215,   69,   69,
      215,  220,  220,  220,   69,  220,  226,   69,   69,   69,
      226,   69,   69,  226,  228,   69,  228,   69,   69,  228,
      334,   69,   69,  334,  373,  371,  334,  336,  336,   69,

      336,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,  339,  333,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,  223,  217,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,  140,  135,
       69,   69,   69,   69,   69,   69,  423,   69,   59,  137,
      135,  133,   51,   52,   49,   50,   69,   67,   66,   63,
       56,   55,   54,   52,   50,  423,    3,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423
    } ;

static yyconst short int yy_chk[944] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   20,   23,   23,   27,
       30,   30,   27,   31,   33,   45,   45,   20,   32,   20,
       20,   29,   31,   33,   29,   30,   72,   20,   31,   33,
       32,   20,   32,   34,   33,   27,   20,   28,   34,   28,
       28,   32,   74,   28,   72,   37,   37,   29,   78,   28,

       84,   28,   29,   34,   28,   28,   28,   35,   44,   29,
       37,   74,   29,   35,   36,   36,   78,   29,   84,   38,
       38,   35,   44,   36,   38,   35,   44,   40,   40,   36,
       41,   41,   42,   47,   38,   41,   47,   42,   43,   38,
       39,   42,   40,   39,   40,   61,   43,   61,   46,   46,
       61,   75,   42,   43,   59,   43,   46,   46,   73,   47,
       75,   73,   43,   75,   80,   59,   39,   59,   59,   76,
       79,   80,   39,   76,   47,   59,   81,   87,   77,   59,
       39,   77,   39,   39,   59,   39,   39,   83,   82,   79,
       85,   81,   82,   83,   86,   77,   88,   89,   90,   87,

       92,   89,  438,   85,   85,   83,   91,   90,   93,   94,
       95,   95,   86,   97,   88,  101,   89,   92,   91,   99,
      102,   99,   93,   94,  100,  103,  100,  104,   97,  103,
      101,  105,  106,  107,  110,  112,  102,  113,  100,  110,
      115,  104,  149,  112,  114,  107,  116,  114,  117,  106,
      149,  106,  118,  105,  105,  118,  113,  115,  119,  118,
      120,  116,  117,  128,  121,  118,  121,  120,  118,  122,
      119,  118,  124,  124,  122,  125,  126,  127,  129,  119,
      128,  130,  127,  131,  132,  126,  130,  129,  136,  141,
      130,  125,  137,  138,  140,  126,  138,  142,  144,  136,

      137,  132,  131,  144,  137,  145,  140,  138,  152,  137,
      145,  146,  146,  136,  151,  141,  150,  150,  153,  151,
      142,  154,  155,  156,  154,  152,  158,  153,  159,  156,
      160,  158,  161,  162,  163,  161,  160,  166,  169,  163,
      165,  169,  171,  163,  159,  167,  155,  162,  160,  165,
      167,  172,  170,  173,  175,  174,  166,  170,  173,  171,
      176,  181,  179,  184,  185,  175,  179,  189,  186,  192,
      188,  172,  174,  186,  190,  184,  176,  190,  185,  193,
      181,  188,  191,  195,  192,  196,  189,  197,  193,  191,
      198,  200,  197,  199,  201,  198,  203,  202,  195,  204,

      205,  203,  208,  207,  210,  196,  209,  199,  201,  205,
      200,  202,  207,  226,  211,  213,  210,  215,  204,  216,
      209,  208,  211,  217,  213,  221,  223,  227,  215,  220,
      216,  217,  220,  222,  221,  217,  222,  228,  223,  226,
      217,  229,  215,  220,  216,  230,  233,  222,  231,  232,
      234,  235,  236,  227,  240,  233,  237,  242,  238,  240,
      228,  236,  243,  230,  229,  231,  244,  232,  235,  238,
      237,  243,  242,  245,  234,  246,  248,  249,  252,  254,
      255,  253,  248,  254,  437,  244,  257,  257,  245,  256,
      258,  258,  264,  270,  246,  267,  249,  252,  253,  255,

      267,  256,  265,  265,  269,  268,  271,  272,  274,  264,
      268,  270,  273,  275,  275,  273,  276,  278,  280,  281,
      288,  269,  432,  271,  272,  274,  282,  282,  285,  294,
      289,  281,  287,  285,  287,  278,  280,  287,  291,  296,
      276,  289,  290,  300,  290,  288,  302,  290,  294,  297,
      301,  297,  304,  302,  303,  303,  291,  305,  296,  307,
      300,  308,  309,  309,  301,  313,  304,  314,  310,  315,
      308,  309,  305,  310,  314,  317,  319,  316,  320,  317,
      319,  321,  313,  307,  316,  322,  323,  315,  326,  324,
      325,  327,  330,  317,  330,  334,  333,  320,  324,  322,

      321,  335,  325,  336,  326,  323,  337,  327,  333,  339,
      341,  343,  346,  345,  336,  341,  347,  337,  345,  348,
      334,  339,  351,  352,  353,  354,  335,  353,  355,  354,
      347,  343,  346,  348,  356,  358,  359,  351,  362,  356,
      358,  360,  352,  362,  366,  368,  369,  378,  370,  376,
      368,  379,  355,  371,  373,  375,  359,  377,  375,  360,
      370,  369,  380,  366,  378,  371,  373,  380,  376,  381,
      379,  377,  382,  388,  390,  391,  393,  382,  395,  394,
      396,  397,  408,  381,  394,  396,  398,  398,  406,  400,
      388,  390,  400,  393,  411,  412,  403,  395,  415,  391,

      397,  403,  408,  416,  418,  419,  431,  406,  421,  418,
      430,  429,  416,  411,  412,  415,  422,  420,  417,  414,
      419,  413,  421,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      427,  410,  427,  427,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  433,  409,  433,  433,  407,  405,
      433,  434,  434,  434,  404,  434,  435,  402,  401,  399,
      435,  392,  389,  435,  436,  387,  436,  386,  385,  436,
      439,  384,  383,  439,  374,  372,  439,  440,  440,  367,

      440,  365,  364,  363,  361,  357,  350,  349,  344,  342,
      340,  338,  332,  331,  329,  328,  318,  312,  311,  306,
      299,  298,  295,  293,  292,  286,  284,  283,  279,  277,
      266,  263,  262,  261,  260,  259,  251,  250,  247,  241,
      239,  224,  218,  212,  206,  194,  187,  183,  182,  180,
      178,  177,  168,  164,  157,  148,  147,  143,  139,  134,
      123,  111,  109,  108,   98,   96,   69,   68,   62,   58,
       55,   53,   52,   51,   50,   49,   26,   25,   24,   21,
       19,   17,   14,    9,    8,    3,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
#define INITIAL 0
#line 2 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
  /************** VHDL scanner in LEX format **********
   *
   * Version 0.2 Wed Aug 11, 1993
   *
   * This scanner is derived from a scanner of the ALLIANCE CAD toolset,
   * release 1.1. That toolset was written from:
   *   MASI/CAO-VLSI CAD Team
   *   Laboratoire MASI/CAO-VLSI
   *   Tour 55-65, 2eme etage, Porte 13
   *   Universite Pierre et Marie Curie (PARIS VI)
   *   4, place Jussieu 75252 PARIS Cedex 05, FRANCE
   * The ALLIANCE CAD Toolset can be obtained from ftp site : ftp-masi.ibp.fr    
   *
   * This scanner is avail at: ftp.cs.utwente.nl in pub/src/VHDL/Grammar
   * A corresponding Yacc grammar is available at the same site
   *
   * author of this derived scanner version:
   * Thomas Dettmer
   * Dortmund University
   * Dept. of Computer Scienc, LS1
   * PB 500 500
   * D-44221 Dortmund (Germany)
   * Phone: +49-231-755-6464
   * e-mail: dettmer@ls1.informatik.uni-dortmund.de
   *
   * Please report discovered bugs, critics, suggestions
   * and changes you make to dettmer@ls1.informatik.uni-dortmund.de
   * a list of those that reported repaired (hopefully) errors can be found
   * at the end
   *
   ****************************************************************
   * 
   * This file is intended not to be used for commercial purposes
   * without permission of the University of Dortmund
   *
   * NOTE THAT THERE IS NO WARRANTY FOR CORRECTNES, COMPLETENESS, SUPPORT
   * OR ANYTHING ELSE.
   *******************************************************/
  
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <search.h>
#include<string>
#include<vector>
using namespace std;

#include "vhdl.yacc_tab.cpp.h"

string temp_token;
vector <string> tokens_stack ;

extern FILE* trace_file; 
  
#ifdef BASE_REPRESENTATION
#ifdef ECHO
#undef ECHO
#endif
#define ECHO echo(yytext)
  static void echo(char* s)
  {
    char  loc[YYLMAX];
    int   l;
    l=strlen(s);
    loc[l]='\0';
    while(l--) loc[l]=toupper(*(s+l));  
    //fprintf(yyout, "%s", loc);
  }
#endif
  static void display (char* s)
  {
	fprintf(yyout, "%s", s);
  }

  // update token 
  static void pass_token (char* s) {
    // 
	temp_token = s; 
    yylval.ds_Id.name = s ;
	fprintf (trace_file,"\ntoken : |%s| \n ", s);
    
  }
  int yycolumno=0;
  
  
#define MVL_LG_MC 15
#define MVL_NB_MC 81
  
  int MVL_LINNUM=1;
  
int isatty ( int x)
{
	return 1; 
}
  
#line 900 "W:\\modules\\vhdl_xhdl\\lex.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 119 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"

#line 1049 "W:\\modules\\vhdl_xhdl\\lex.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yyleng;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 424 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 887 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 120 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{
  /* nothing */
#ifndef BASE_REPRESENTATION			
  // pass_token (yytext)  ; /*return(t_Space);*/
#endif
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 126 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Ampersand);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 127 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Apostrophe);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 128 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_LeftParen);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 129 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_RightParen);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 130 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_DoubleStar);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 131 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Star);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 132 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ;;return(t_Plus);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 133 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Comma);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 134 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Minus);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 135 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_VarAsgn);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 136 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Colon);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 137 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Semicolon);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 138 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_LESym);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 139 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_GESym);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 140 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_LTSym);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 141 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_GTSym);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 142 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_EQSym);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 143 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_NESym);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 144 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Arrow);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 145 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Box);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Bar);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 147 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Bar);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 148 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Dot);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 149 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_Slash);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 152 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_OR);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 153 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ABS);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 154 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ACCESS);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 155 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_AFTER);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 156 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ALIAS);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 157 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ALL);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 158 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_AND);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 159 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ARCHITECTURE);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 160 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ARRAY);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 161 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ASSERT);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 162 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ATTRIBUTE);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 163 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_BEGIN);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 164 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_BLOCK);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 165 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_BODY);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 166 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_BUFFER);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 167 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_BUS);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 168 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_CASE);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_COMPONENT);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 170 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_CONFIGURATION);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 171 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_CONSTANT);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 172 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_DISCONNECT);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 173 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_DOWNTO);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 174 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ELSE);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 175 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ELSIF);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 176 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_END);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 177 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ENTITY);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 178 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_EXIT);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 179 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_FILE);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 180 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_FOR);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 181 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_FUNCTION);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 182 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_GENERATE);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 183 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_GENERIC);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 184 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_GUARDED);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 185 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_IF);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 186 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_IN);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 187 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_INOUT);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 188 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_IS);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 189 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_LABEL);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 190 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_LIBRARY);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 191 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_LINKAGE);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 192 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_LOOP);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 193 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_MAP);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 194 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_MOD);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 195 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_NAND);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 196 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_NEW);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 197 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_NEXT);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 198 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_NOR);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 199 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_NOT);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 200 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_NULL);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 201 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_OF);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 202 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_ON);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 203 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_OPEN);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 204 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_OTHERS);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 205 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_OUT);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 206 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_PACKAGE);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 207 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_PORT);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 208 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_PROCEDURE);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 209 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_PROCESS);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 210 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_RANGE);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 211 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_RECORD);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 212 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_REGISTER);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 213 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_REM);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 214 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_REPORT);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 215 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_RETURN);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 216 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_SELECT);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 217 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_SEVERITY);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 218 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_SIGNAL);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 219 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_SUBTYPE);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 220 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_THEN);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 221 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_TO);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 222 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_TRANSPORT);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 223 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_TYPE);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 224 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_UNITS);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 225 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_UNTIL);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 226 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_USE);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 227 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_VARIABLE);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 228 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_WAIT);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 229 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_WHEN);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 230 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_WHILE);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 231 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_WITH);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 232 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{  ; return(t_XOR);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 236 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{

        pass_token (yytext); return ( t_Identifier );
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 241 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{
    ;pass_token (yytext)
    ; return ( t_AbstractLit );
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 246 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{
    ; return ( t_CharacterLit );
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 250 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{
    ; return ( t_StringLit );
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 254 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{
    ; return ( t_BitStringLit );
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 258 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{
  /* end of line */
  MVL_LINNUM++;
  /* tobuf( "\n%4d\t", MVL_LINNUM);*/
  yycolumno=0;
  /*return(t_NEWLINE);*/
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 266 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{
  /* comment */
#ifndef BASE_REPRESENTATION
    ;
#endif
  /*return(t_COMMENT);*/
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 273 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
{
   ; /*return (t_UNKNOWN);*/
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 276 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"
ECHO;
	YY_BREAK
#line 1775 "W:\\modules\\vhdl_xhdl\\lex.yy.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 424 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 424 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 423);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 276 "W:\\modules\\vhdl_xhdl\\grammar_files\\vhdl.lex"

/************************************************************
 * J.Gaisler reported:
 * 	MVL_NB_MC should be set to 81 - done
 * The original of this stuff was an illegal and wrong pointer
 *************************************************************/

int yywrap()
	{
	return 1;
	}
