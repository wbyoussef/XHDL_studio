
/*  A Bison parser, made from w:\modules\vhdl_xhdl\grammar_files\vhdl.yacc with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	t_ACCESS	258
#define	t_AFTER	259
#define	t_ALIAS	260
#define	t_ALL	261
#define	t_AND	262
#define	t_ARCHITECTURE	263
#define	t_ARRAY	264
#define	t_ASSERT	265
#define	t_ATTRIBUTE	266
#define	t_BEGIN	267
#define	t_BLOCK	268
#define	t_BODY	269
#define	t_BUFFER	270
#define	t_BUS	271
#define	t_CASE	272
#define	t_COMPONENT	273
#define	t_CONFIGURATION	274
#define	t_CONSTANT	275
#define	t_DISCONNECT	276
#define	t_DOWNTO	277
#define	t_ELSE	278
#define	t_ELSIF	279
#define	t_END	280
#define	t_ENTITY	281
#define	t_EXIT	282
#define	t_FILE	283
#define	t_FOR	284
#define	t_FUNCTION	285
#define	t_GENERATE	286
#define	t_GENERIC	287
#define	t_GUARDED	288
#define	t_IF	289
#define	t_IN	290
#define	t_INOUT	291
#define	t_IS	292
#define	t_LABEL	293
#define	t_LIBRARY	294
#define	t_LINKAGE	295
#define	t_LOOP	296
#define	t_MAP	297
#define	t_NAND	298
#define	t_NEW	299
#define	t_NEXT	300
#define	t_NOR	301
#define	t_NULL	302
#define	t_OF	303
#define	t_ON	304
#define	t_OPEN	305
#define	t_OR	306
#define	t_OTHERS	307
#define	t_OUT	308
#define	t_PACKAGE	309
#define	t_PORT	310
#define	t_PROCEDURE	311
#define	t_PROCESS	312
#define	t_RANGE	313
#define	t_RECORD	314
#define	t_REGISTER	315
#define	t_REPORT	316
#define	t_RETURN	317
#define	t_SELECT	318
#define	t_SEVERITY	319
#define	t_SIGNAL	320
#define	t_SUBTYPE	321
#define	t_THEN	322
#define	t_TO	323
#define	t_TRANSPORT	324
#define	t_TYPE	325
#define	t_UNITS	326
#define	t_UNTIL	327
#define	t_USE	328
#define	t_VARIABLE	329
#define	t_WAIT	330
#define	t_WHEN	331
#define	t_WHILE	332
#define	t_WITH	333
#define	t_XOR	334
#define	t_EQSym	335
#define	t_NESym	336
#define	t_LTSym	337
#define	t_LESym	338
#define	t_GTSym	339
#define	t_GESym	340
#define	t_Plus	341
#define	t_Minus	342
#define	t_Ampersand	343
#define	MED_PRECEDENCE	344
#define	t_Star	345
#define	t_Slash	346
#define	t_MOD	347
#define	t_REM	348
#define	t_DoubleStar	349
#define	t_ABS	350
#define	t_NOT	351
#define	MAX_PRECEDENCE	352
#define	t_Apostrophe	353
#define	t_LeftParen	354
#define	t_RightParen	355
#define	t_Comma	356
#define	t_VarAsgn	357
#define	t_Colon	358
#define	t_Semicolon	359
#define	t_Arrow	360
#define	t_Box	361
#define	t_Bar	362
#define	t_Dot	363
#define	t_Identifier	364
#define	t_AbstractLit	365
#define	t_CharacterLit	366
#define	t_StringLit	367
#define	t_BitStringLit	368


#include "vhdl_xhdl_actions.h"

bool current_signal_is_bit = true; 
string temp_signal_hig_val ; 
extern FILE* trace_file; 



typedef union{
  struct{
    int pos;
    int len;
    int line;
    char* name;
  } ds_Id;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		869
#define	YYFLAG		-32768
#define	YYNTBASE	114

#define YYTRANSLATE(x) ((unsigned)(x) <= 368 ? yytranslate[x] : 383)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    30,    31,    33,    36,    38,    42,
    45,    46,    49,    51,    53,    55,    57,    59,    61,    63,
    67,    71,    73,    77,    86,    90,    91,    93,    94,    97,
    98,   101,   103,   104,   108,   109,   113,   121,   127,   128,
   130,   131,   134,   136,   143,   149,   150,   152,   153,   156,
   158,   164,   168,   169,   171,   172,   175,   177,   183,   188,
   189,   191,   192,   195,   197,   199,   201,   203,   205,   207,
   209,   211,   213,   215,   217,   219,   221,   223,   225,   227,
   229,   231,   233,   235,   237,   239,   241,   243,   245,   247,
   249,   251,   253,   255,   257,   259,   261,   263,   265,   267,
   269,   271,   273,   275,   277,   279,   282,   286,   292,   293,
   295,   296,   298,   307,   308,   310,   311,   314,   316,   321,
   322,   325,   328,   336,   337,   340,   341,   343,   344,   346,
   347,   349,   351,   353,   355,   357,   359,   364,   365,   368,
   371,   376,   377,   380,   383,   387,   389,   391,   393,   395,
   397,   399,   401,   403,   405,   407,   409,   411,   415,   419,
   423,   427,   431,   435,   439,   443,   445,   448,   451,   454,
   457,   461,   465,   469,   473,   477,   481,   485,   489,   493,
   497,   501,   505,   509,   513,   515,   517,   519,   521,   523,
   527,   529,   531,   533,   535,   537,   541,   543,   545,   547,
   550,   553,   557,   561,   565,   569,   572,   578,   583,   587,
   593,   597,   602,   606,   609,   610,   612,   613,   615,   619,
   621,   624,   625,   628,   631,   633,   635,   637,   642,   643,
   646,   648,   650,   652,   654,   656,   658,   660,   662,   667,
   668,   671,   674,   681,   682,   685,   687,   690,   695,   703,
   704,   707,   710,   714,   719,   725,   726,   729,   731,   736,
   739,   743,   749,   752,   754,   755,   757,   761,   764,   768,
   769,   771,   774,   779,   780,   783,   786,   788,   790,   792,
   796,   798,   802,   804,   806,   813,   814,   817,   825,   826,
   829,   830,   832,   839,   840,   843,   845,   847,   849,   851,
   853,   861,   870,   871,   873,   881,   884,   886,   888,   889,
   892,   895,   901,   909,   913,   916,   918,   920,   921,   924,
   927,   929,   931,   933,   935,   937,   939,   941,   943,   945,
   947,   949,   951,   953,   955,   957,   959,   961,   964,   969,
   972,   974,   975,   978,   980,   982,   984,   986,   988,   990,
   992,   994,  1008,  1009,  1011,  1012,  1015,  1017,  1018,  1023,
  1024,  1029,  1030,  1035,  1036,  1041,  1042,  1046,  1055,  1063,
  1064,  1068,  1072,  1074,  1078,  1080,  1084,  1086,  1090,  1092,
  1098,  1101,  1102,  1105,  1110,  1113,  1114,  1117,  1120,  1123,
  1124,  1127,  1129,  1131,  1134,  1135,  1137,  1138,  1140,  1149,
  1154,  1155,  1158,  1163,  1173,  1174,  1176,  1180,  1182,  1192,
  1193,  1195,  1196,  1199,  1201,  1202,  1206,  1209,  1210,  1213,
  1216,  1218,  1219,  1222,  1224,  1226,  1228,  1230,  1232,  1234,
  1236,  1238,  1240,  1242,  1244,  1246,  1248,  1254,  1255,  1258,
  1259,  1262,  1271,  1272,  1275,  1277,  1282,  1287,  1288,  1291,
  1292,  1294,  1304,  1305,  1308,  1309,  1312,  1317,  1326,  1327,
  1329,  1330,  1332,  1333,  1336,  1341,  1342,  1345,  1346,  1348,
  1351,  1354,  1358,  1359,  1361,  1367,  1368,  1370,  1375,  1381,
  1382,  1385,  1386,  1389,  1390,  1393,  1401,  1402,  1406,  1407,
  1411,  1419,  1420,  1423,  1425,  1426,  1429,  1431,  1433,  1435,
  1437,  1445,  1446,  1448,  1449,  1453,  1459,  1463,  1465,  1467,
  1469,  1473,  1474,  1478,  1479,  1483,  1486,  1489
};

static const short yyrhs[] = {   115,
     0,   116,     0,   124,     0,   116,   124,     0,   109,     0,
   112,     0,   110,     0,   111,     0,   113,     0,   122,     0,
    47,     0,   111,     0,   109,     0,   121,   109,     0,     0,
   110,     0,   110,   109,     0,   109,     0,   123,   101,   109,
     0,   125,   126,     0,     0,   125,   127,     0,   131,     0,
   144,     0,   149,     0,   139,     0,   154,     0,   128,     0,
   129,     0,    39,   123,   104,     0,    73,   130,   104,     0,
   203,     0,   130,   101,   203,     0,   132,   138,   137,   135,
   134,    25,   133,   104,     0,    26,   109,    37,     0,     0,
   109,     0,     0,    12,   281,     0,     0,   135,   136,     0,
   160,     0,     0,    55,   175,   104,     0,     0,    32,   175,
   104,     0,   140,   142,    12,   281,    25,   141,   104,     0,
     8,   109,    48,   109,    37,     0,     0,   109,     0,     0,
   142,   143,     0,   161,     0,   145,   147,   366,    25,   146,
   104,     0,    19,   109,    48,   109,    37,     0,     0,   109,
     0,     0,   147,   148,     0,   166,     0,   150,   152,    25,
   151,   104,     0,    54,   109,    37,     0,     0,   109,     0,
     0,   152,   153,     0,   162,     0,   155,   157,    25,   156,
   104,     0,    54,    14,   109,    37,     0,     0,   109,     0,
     0,   157,   158,     0,   163,     0,   218,     0,   240,     0,
   253,     0,   263,     0,   262,     0,   167,     0,   129,     0,
   159,     0,   171,     0,   269,     0,   270,     0,   265,     0,
   255,     0,   159,     0,   171,     0,   363,     0,   269,     0,
   270,     0,   376,     0,   265,     0,   255,     0,   159,     0,
   363,     0,   269,     0,   270,     0,   265,     0,   255,     0,
   159,     0,   171,     0,   159,     0,   171,     0,   269,     0,
   270,     0,   258,     0,   159,     0,   171,     0,   269,     0,
   270,     0,   258,     0,   270,     0,   129,     0,   168,   104,
     0,    56,   109,   170,     0,    30,   117,   169,    62,   194,
     0,     0,   175,     0,     0,   175,     0,   168,    37,   173,
    12,   327,    25,   172,   104,     0,     0,   117,     0,     0,
   173,   174,     0,   164,     0,    99,   178,   176,   100,     0,
     0,   176,   177,     0,   104,   178,     0,   182,   123,   103,
   181,   241,   180,   179,     0,     0,   102,   195,     0,     0,
    15,     0,     0,   183,     0,     0,   260,     0,    35,     0,
    53,     0,    36,     0,    15,     0,    40,     0,    99,   190,
   185,   100,     0,     0,   185,   186,     0,   101,   190,     0,
    99,   191,   188,   100,     0,     0,   188,   189,     0,   101,
   191,     0,   192,   105,   193,     0,   193,     0,   195,     0,
   250,     0,   201,     0,   195,     0,    50,     0,   109,     0,
   203,     0,   196,     0,   197,     0,   198,     0,   199,     0,
   199,    43,   199,     0,   199,    46,   199,     0,   199,     7,
   199,     0,   196,     7,   199,     0,   199,    51,   199,     0,
   197,    51,   199,     0,   199,    79,   199,     0,   198,    79,
   199,     0,   200,     0,    86,   200,     0,    87,   200,     0,
    95,   200,     0,    96,   200,     0,   200,    94,   200,     0,
   199,    92,   199,     0,   199,    93,   199,     0,   199,    88,
   199,     0,   199,    90,   199,     0,   199,    86,   199,     0,
   199,    87,   199,     0,   199,    83,   199,     0,   199,    85,
   199,     0,   199,    82,   199,     0,   199,    84,   199,     0,
   199,    80,   199,     0,   199,    81,   199,     0,   199,    91,
   199,     0,   201,     0,   118,     0,   207,     0,   209,     0,
   210,     0,    99,   195,   100,     0,   194,     0,   202,     0,
   112,     0,   206,     0,   205,     0,   201,   108,   204,     0,
   117,     0,   111,     0,     6,     0,   194,   187,     0,   202,
   187,     0,   194,    98,   109,     0,   202,    98,   109,     0,
   194,    98,    58,     0,   202,    98,    58,     0,   208,   100,
     0,    99,   214,   105,   195,   100,     0,    99,   213,   101,
   213,     0,   208,   101,   213,     0,   194,    98,    99,   195,
   100,     0,   194,    98,   207,     0,    44,   194,   194,   212,
     0,    44,   194,   211,     0,    44,   209,     0,     0,   187,
     0,     0,   187,     0,   214,   105,   195,     0,   195,     0,
   217,   215,     0,     0,   215,   216,     0,   107,   217,     0,
   195,     0,   250,     0,    52,     0,    70,   109,   219,   104,
     0,     0,    37,   220,     0,   221,     0,   245,     0,   224,
     0,   229,     0,   233,     0,   234,     0,   238,     0,   239,
     0,    99,   119,   222,   100,     0,     0,   222,   223,     0,
   101,   119,     0,   245,    71,   227,   225,    25,    71,     0,
     0,   225,   226,     0,   228,     0,   109,   104,     0,   109,
    80,   120,   104,     0,     9,    99,   232,   230,   100,    48,
   241,     0,     0,   230,   231,     0,   101,   232,     0,   194,
    58,   106,     0,     9,   246,    48,   241,     0,    59,   237,
   235,    25,    59,     0,     0,   235,   236,     0,   237,     0,
   123,   103,   241,   104,     0,     3,   241,     0,    28,    48,
   194,     0,    66,   109,    37,   241,   104,     0,   194,   242,
     0,   243,     0,     0,   187,     0,   194,   194,   245,     0,
   194,   245,     0,   194,   194,   244,     0,     0,   187,     0,
    58,   251,     0,    99,   249,   247,   100,     0,     0,   247,
   248,     0,   101,   249,     0,   241,     0,   251,     0,   243,
     0,   195,   252,   195,     0,   206,     0,   194,   252,   194,
     0,    68,     0,    22,     0,    20,   123,   103,   241,   254,
   104,     0,     0,   102,   195,     0,    65,   123,   103,   241,
   257,   256,   104,     0,     0,   102,   195,     0,     0,   261,
     0,    74,   123,   103,   241,   259,   104,     0,     0,   102,
   195,     0,    20,     0,    65,     0,    74,     0,    16,     0,
    60,     0,     5,   109,   103,   241,    37,   201,   104,     0,
    28,   109,   103,   241,    37,   264,   195,   104,     0,     0,
   183,     0,    21,   266,   103,   194,     4,   195,   104,     0,
   201,   267,     0,    52,     0,     6,     0,     0,   267,   268,
     0,   101,   201,     0,    11,   109,   103,   194,   104,     0,
    11,   109,    48,   271,    37,   195,   104,     0,   272,   103,
   275,     0,   117,   273,     0,    52,     0,     6,     0,     0,
   273,   274,     0,   101,   117,     0,    26,     0,     8,     0,
    54,     0,    19,     0,    18,     0,    38,     0,    70,     0,
    66,     0,    56,     0,    30,     0,    65,     0,    74,     0,
    20,     0,   278,     0,   279,     0,   279,     0,   280,     0,
    34,   195,     0,    29,   109,    35,   249,     0,    77,   195,
     0,   282,     0,     0,   282,   283,     0,   284,     0,   285,
     0,   296,     0,   297,     0,   298,     0,   294,     0,   316,
     0,   318,     0,   109,   103,    13,   293,   291,   289,   287,
    12,   281,    25,    13,   286,   104,     0,     0,   109,     0,
     0,   287,   288,     0,   161,     0,     0,    55,   175,   104,
   290,     0,     0,    55,    42,   184,   104,     0,     0,    32,
   175,   104,   292,     0,     0,    32,    42,   184,   104,     0,
     0,    99,   195,   100,     0,   109,   103,   194,    32,    42,
   184,   295,   104,     0,   109,   103,   194,    55,    42,   184,
   104,     0,     0,    55,    42,   184,     0,   109,   103,   331,
     0,   331,     0,   109,   103,   353,     0,   353,     0,   109,
   103,   299,     0,   299,     0,   109,   103,   312,     0,   312,
     0,   308,    83,   309,   300,   104,     0,   301,   303,     0,
     0,   301,   302,     0,   303,    76,   195,    23,     0,   306,
   304,     0,     0,   304,   305,     0,   101,   306,     0,   195,
   307,     0,     0,     4,   195,     0,   201,     0,   207,     0,
   311,   310,     0,     0,    69,     0,     0,    33,     0,    78,
   195,    63,   308,    83,   309,   313,   104,     0,   314,   303,
    76,   214,     0,     0,   314,   315,     0,   303,    76,   214,
   101,     0,   109,   103,   276,    31,   281,    25,    31,   317,
   104,     0,     0,   109,     0,   109,   103,   319,     0,   319,
     0,    57,   323,   321,    12,   327,    25,    57,   320,   104,
     0,     0,   109,     0,     0,   321,   322,     0,   165,     0,
     0,    99,   324,   100,     0,   201,   325,     0,     0,   325,
   326,     0,   101,   201,     0,   328,     0,     0,   328,   329,
     0,   330,     0,   331,     0,   334,     0,   338,     0,   341,
     0,   345,     0,   349,     0,   352,     0,   353,     0,   354,
     0,   356,     0,   358,     0,   359,     0,    10,   195,   333,
   332,   104,     0,     0,    64,   195,     0,     0,    61,   195,
     0,    17,   195,    37,   337,   335,    25,    17,   104,     0,
     0,   335,   336,     0,   337,     0,    76,   214,   105,   327,
     0,    27,   340,   339,   104,     0,     0,    76,   195,     0,
     0,   109,     0,    34,   195,    67,   327,   343,   342,    25,
    34,   104,     0,     0,    23,   327,     0,     0,   343,   344,
     0,    24,   195,    67,   327,     0,   348,   347,    41,   327,
    25,    41,   346,   104,     0,     0,   109,     0,     0,   277,
     0,     0,   109,   103,     0,    45,   351,   350,   104,     0,
     0,    76,   195,     0,     0,   109,     0,    47,   104,     0,
   201,   104,     0,    62,   355,   104,     0,     0,   195,     0,
   308,    83,   357,   303,   104,     0,     0,    69,     0,   308,
   102,   195,   104,     0,    75,   362,   361,   360,   104,     0,
     0,    29,   195,     0,     0,    72,   195,     0,     0,    49,
   324,     0,    18,   109,   365,   364,    25,    18,   104,     0,
     0,    55,   175,   104,     0,     0,    32,   175,   104,     0,
    29,   371,   369,   367,    25,    29,   104,     0,     0,   367,
   368,     0,   372,     0,     0,   369,   370,     0,   129,     0,
   201,     0,   366,     0,   373,     0,    29,   377,   375,   374,
    25,    29,   104,     0,     0,   366,     0,     0,    73,   379,
   104,     0,    29,   377,    73,   379,   104,     0,   378,   103,
   194,     0,   123,     0,     6,     0,    52,     0,   382,   381,
   380,     0,     0,    55,    42,   184,     0,     0,    32,    42,
   184,     0,    26,   201,     0,    19,   194,     0,    50,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   190,   196,   197,   198,   200,   201,   203,   204,   205,   206,
   207,   210,   211,   213,   214,   215,   216,   218,   224,   230,
   231,   232,   234,   235,   236,   237,   238,   240,   241,   243,
   245,   247,   248,   254,   256,   260,   261,   262,   263,   264,
   265,   266,   267,   268,   270,   271,   273,   275,   280,   281,
   282,   283,   284,   286,   289,   290,   291,   292,   293,   294,
   296,   297,   298,   299,   300,   301,   302,   304,   305,   306,
   307,   308,   309,   310,   315,   316,   317,   318,   319,   320,
   321,   323,   324,   325,   326,   327,   328,   330,   331,   332,
   333,   334,   335,   336,   337,   339,   340,   341,   342,   343,
   344,   346,   347,   349,   350,   351,   352,   353,   355,   356,
   357,   358,   359,   361,   362,   367,   369,   370,   371,   372,
   373,   374,   376,   377,   378,   379,   380,   381,   387,   388,
   389,   390,   392,   398,   399,   400,   401,   402,   403,   404,
   408,   410,   414,   418,   419,   420,   422,   423,   424,   425,
   428,   429,   430,   431,   432,   433,   436,   437,   439,   441,
   442,   448,   449,   451,   452,   453,   454,   455,   456,   458,
   463,   468,   472,   477,   478,   481,   482,   483,   484,   485,
   486,   491,   495,   500,   504,   508,   512,   516,   520,   524,
   528,   532,   536,   540,   546,   550,   551,   552,   553,   554,
   556,   557,   559,   560,   561,   563,   565,   566,   567,   569,
   570,   572,   573,   574,   575,   577,   578,   580,   581,   583,
   584,   587,   588,   589,   590,   591,   592,   593,   600,   601,
   603,   604,   605,   606,   608,   609,   610,   616,   617,   618,
   620,   621,   622,   623,   624,   625,   626,   627,   629,   630,
   631,   632,   634,   636,   637,   638,   640,   642,   644,   647,
   648,   649,   651,   653,   655,   657,   658,   659,   661,   663,
   665,   671,   673,   681,   682,   690,   693,   694,   695,   696,
   697,   699,   701,   702,   703,   704,   706,   707,   709,   710,
   724,   728,   734,   739,   749,   750,   751,   753,   754,   755,
   756,   757,   759,   760,   761,   763,   764,   765,   767,   768,
   770,   772,   773,   774,   776,   778,   779,   780,   781,   782,
   783,   789,   791,   793,   795,   796,   797,   798,   799,   800,
   802,   803,   804,   805,   806,   807,   808,   809,   810,   811,
   812,   813,   814,   820,   821,   823,   824,   826,   828,   830,
   836,   837,   838,   839,   841,   842,   843,   844,   845,   846,
   847,   849,   852,   853,   854,   855,   856,   857,   858,   859,
   860,   861,   862,   863,   864,   865,   866,   868,   869,   870,
   871,   873,   874,   876,   877,   879,   880,   881,   882,   884,
   886,   887,   888,   889,   891,   892,   893,   894,   896,   897,
   898,   900,   904,   906,   907,   908,   909,   910,   912,   914,
   915,   916,   917,   919,   921,   922,   924,   925,   927,   929,
   930,   931,   932,   933,   934,   935,   937,   938,   939,   940,
   946,   950,   951,   952,   957,   958,   959,   960,   961,   962,
   963,   964,   965,   966,   967,   968,   970,   971,   972,   973,
   974,   976,   977,   978,   979,   981,   983,   984,   985,   986,
   987,   989,   990,   991,   992,   993,   994,   996,   997,   998,
   999,  1000,  1001,  1002,  1004,  1005,  1006,  1007,  1008,  1010,
  1012,  1014,  1015,  1016,  1018,  1023,  1024,  1026,  1028,  1029,
  1030,  1031,  1032,  1033,  1034,  1039,  1040,  1041,  1042,  1043,
  1045,  1046,  1047,  1048,  1049,  1050,  1051,  1053,  1055,  1056,
  1058,  1059,  1060,  1061,  1062,  1064,  1067,  1069,  1070,  1071,
  1073,  1074,  1075,  1076,  1077,  1079,  1080,  1081
};

static const char * const yytname[] = {   "$","error","$undefined.","t_ACCESS",
"t_AFTER","t_ALIAS","t_ALL","t_AND","t_ARCHITECTURE","t_ARRAY","t_ASSERT","t_ATTRIBUTE",
"t_BEGIN","t_BLOCK","t_BODY","t_BUFFER","t_BUS","t_CASE","t_COMPONENT","t_CONFIGURATION",
"t_CONSTANT","t_DISCONNECT","t_DOWNTO","t_ELSE","t_ELSIF","t_END","t_ENTITY",
"t_EXIT","t_FILE","t_FOR","t_FUNCTION","t_GENERATE","t_GENERIC","t_GUARDED",
"t_IF","t_IN","t_INOUT","t_IS","t_LABEL","t_LIBRARY","t_LINKAGE","t_LOOP","t_MAP",
"t_NAND","t_NEW","t_NEXT","t_NOR","t_NULL","t_OF","t_ON","t_OPEN","t_OR","t_OTHERS",
"t_OUT","t_PACKAGE","t_PORT","t_PROCEDURE","t_PROCESS","t_RANGE","t_RECORD",
"t_REGISTER","t_REPORT","t_RETURN","t_SELECT","t_SEVERITY","t_SIGNAL","t_SUBTYPE",
"t_THEN","t_TO","t_TRANSPORT","t_TYPE","t_UNITS","t_UNTIL","t_USE","t_VARIABLE",
"t_WAIT","t_WHEN","t_WHILE","t_WITH","t_XOR","t_EQSym","t_NESym","t_LTSym","t_LESym",
"t_GTSym","t_GESym","t_Plus","t_Minus","t_Ampersand","MED_PRECEDENCE","t_Star",
"t_Slash","t_MOD","t_REM","t_DoubleStar","t_ABS","t_NOT","MAX_PRECEDENCE","t_Apostrophe",
"t_LeftParen","t_RightParen","t_Comma","t_VarAsgn","t_Colon","t_Semicolon","t_Arrow",
"t_Box","t_Bar","t_Dot","t_Identifier","t_AbstractLit","t_CharacterLit","t_StringLit",
"t_BitStringLit","start","design_file","design_unit_list","designator","literal",
"enumeration_literal","physical_literal","physical_literal_1","physical_literal_no_default",
"idf_list","design_unit","context_list","lib_unit","context_item","lib_clause",
"use_clause","sel_list","entity_decl","entity_start","entity_decl_5","entity_decl_4",
"entity_decl_3","entity_decl_6","entity_decl_2","entity_decl_1","arch_body",
"arch_start","arch_body_2","arch_body_1","arch_body_3","config_decl","config_start",
"config_decl_2","config_decl_1","config_decl_3","package_decl","package_start",
"package_decl_2","package_decl_1","package_decl_3","package_body","pack_body_start",
"package_body_2","package_body_1","package_body_3","common_decltve_item","entity_decltve_item",
"block_decltve_item","package_decltve_item","package_body_decltve_item","subprog_decltve_item",
"procs_decltve_item","config_decltve_item","subprog_decl","subprog_spec","subprog_spec_2",
"subprog_spec_1","subprog_body","subprog_body_2","subprog_body_1","subprog_body_3",
"interf_list","interf_list_1","interf_list_2","interf_element","interf_element_4",
"interf_element_3","interf_element_2","interf_element_1","mode","association_list",
"association_list_1","association_list_2","gen_association_list","gen_association_list_1",
"gen_association_list_2","association_element","gen_association_element","formal_part",
"actual_part","mark","expr","and_relation","or_relation","xor_relation","relation",
"primary","name","name2","sel_name","suffix","ifts_name","attribute_name","aggregate",
"element_association_list2","qualified_expr","allocator","allocator_2","allocator_1",
"element_association","choices","choices_1","choices_2","choice","type_decl",
"type_decl_1","type_definition","enumeration_type_definition","enumeration_type_definition_1",
"enumeration_type_definition_2","physical_type_definition","physical_type_definition_1",
"physical_type_definition_2","base_unit_decl","secondary_unit_decl","unconstrained_array_definition",
"unconstrained_array_definition_1","unconstrained_array_definition_2","index_subtype_definition",
"constrained_array_definition","record_type_definition","record_type_definition_1",
"record_type_definition_2","element_decl","access_type_definition","file_type_definition",
"subtype_decl","subtype_indic","subtype_indic_1","subtype_indic1","subtype_indic1_1",
"range_constraint","index_constraint","index_constraint_1","index_constraint_2",
"discrete_range","discrete_range1","range_spec","direction","constant_decl",
"constant_decl_1","signal_decl","signal_decl_2","signal_decl_1","variable_decl",
"variable_decl_1","object_class","signal_kind","alias_decl","file_decl","file_decl_1",
"disconnection_spec","signal_list","signal_list_1","signal_list_2","attribute_decl",
"attribute_spec","entity_spec","entity_name_list","entity_name_list_1","entity_name_list_2",
"entity_class","generation_scheme","iteration_scheme","if_scheme","for_scheme",
"while_scheme","concurrent_stats","concurrent_stats_1","concurrent_stats_2",
"concurrent_stat","block_stat","block_stat_5","block_stat_4","block_stat_6",
"block_stat_3","block_stat_7","block_stat_2","block_stat_8","block_stat_1","comp_inst_stat",
"comp_inst_stat_1","concurrent_assertion_stat","concurrent_procedure_call","concurrent_signal_assign_stat",
"condal_signal_assign","condal_wavefrms","condal_wavefrms_1","condal_wavefrms_2",
"wavefrm","wavefrm_1","wavefrm_2","wavefrm_element","wavefrm_element_1","target",
"opts","opts_2","opts_1","sel_signal_assign","sel_wavefrms","sel_wavefrms_1",
"sel_wavefrms_2","generate_stat","generate_stat_1","procs_stat","procs_stat1",
"procs_stat1_3","procs_stat1_2","procs_stat1_4","procs_stat1_1","sensitivity_list",
"sensitivity_list_1","sensitivity_list_2","seq_stats","seq_stats_1","seq_stats_2",
"seq_stat","assertion_stat","assertion_stat_2","assertion_stat_1","case_stat",
"case_stat_1","case_stat_2","case_stat_alternative","exit_stat","exit_stat_2",
"exit_stat_1","if_stat","if_stat_2","if_stat_1","if_stat_3","loop_stat","loop_stat_3",
"loop_stat_2","loop_stat_1","next_stat","next_stat_2","next_stat_1","null_stat",
"procedure_call_stat","return_stat","return_stat_1","signal_assign_stat","signal_assign_stat_1",
"variable_assign_stat","wait_stat","wait_stat_3","wait_stat_2","wait_stat_1",
"comp_decl","comp_decl_2","comp_decl_1","block_config","block_config_2","block_config_3",
"block_config_1","block_config_4","block_spec","config_item","comp_config","comp_config_2",
"comp_config_1","config_spec","comp_spec","inst_list","binding_indic","binding_indic_2",
"binding_indic_1","entity_aspect",""
};
#endif

static const short yyr1[] = {     0,
   114,   115,   116,   116,   117,   117,   118,   118,   118,   118,
   118,   119,   119,   120,   121,   121,   122,   123,   123,   124,
   125,   125,   126,   126,   126,   126,   126,   127,   127,   128,
   129,   130,   130,   131,   132,   133,   133,   134,   134,   135,
   135,   136,   137,   137,   138,   138,   139,   140,   141,   141,
   142,   142,   143,   144,   145,   146,   146,   147,   147,   148,
   149,   150,   151,   151,   152,   152,   153,   154,   155,   156,
   156,   157,   157,   158,   159,   159,   159,   159,   159,   159,
   159,   160,   160,   160,   160,   160,   160,   161,   161,   161,
   161,   161,   161,   161,   161,   162,   162,   162,   162,   162,
   162,   163,   163,   164,   164,   164,   164,   164,   165,   165,
   165,   165,   165,   166,   166,   167,   168,   168,   169,   169,
   170,   170,   171,   172,   172,   173,   173,   174,   175,   176,
   176,   177,   178,   179,   179,   180,   180,   181,   181,   182,
   182,   183,   183,   183,   183,   183,   184,   185,   185,   186,
   187,   188,   188,   189,   190,   190,   191,   191,   192,   193,
   193,   194,   194,   195,   195,   195,   195,   195,   195,   196,
   196,   197,   197,   198,   198,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   200,   200,   200,   200,   200,   200,
   201,   201,   202,   202,   202,   203,   204,   204,   204,   205,
   205,   206,   206,   206,   206,   207,   207,   208,   208,   209,
   209,   210,   210,   210,   211,   211,   212,   212,   213,   213,
   214,   215,   215,   216,   217,   217,   217,   218,   219,   219,
   220,   220,   220,   220,   220,   220,   220,   220,   221,   222,
   222,   223,   224,   225,   225,   226,   227,   228,   229,   230,
   230,   231,   232,   233,   234,   235,   235,   236,   237,   238,
   239,   240,   241,   241,   242,   242,   243,   243,   243,   244,
   244,   245,   246,   247,   247,   248,   249,   249,   250,   250,
   251,   251,   252,   252,   253,   254,   254,   255,   256,   256,
   257,   257,   258,   259,   259,   260,   260,   260,   261,   261,
   262,   263,   264,   264,   265,   266,   266,   266,   267,   267,
   268,   269,   270,   271,   272,   272,   272,   273,   273,   274,
   275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
   275,   275,   275,   276,   276,   277,   277,   278,   279,   280,
   281,   282,   282,   283,   284,   284,   284,   284,   284,   284,
   284,   285,   286,   286,   287,   287,   288,   289,   289,   290,
   290,   291,   291,   292,   292,   293,   293,   294,   294,   295,
   295,   296,   296,   297,   297,   298,   298,   298,   298,   299,
   300,   301,   301,   302,   303,   304,   304,   305,   306,   307,
   307,   308,   308,   309,   310,   310,   311,   311,   312,   313,
   314,   314,   315,   316,   317,   317,   318,   318,   319,   320,
   320,   321,   321,   322,   323,   323,   324,   325,   325,   326,
   327,   328,   328,   329,   330,   330,   330,   330,   330,   330,
   330,   330,   330,   330,   330,   330,   331,   332,   332,   333,
   333,   334,   335,   335,   336,   337,   338,   339,   339,   340,
   340,   341,   342,   342,   343,   343,   344,   345,   346,   346,
   347,   347,   348,   348,   349,   350,   350,   351,   351,   352,
   353,   354,   355,   355,   356,   357,   357,   358,   359,   360,
   360,   361,   361,   362,   362,   363,   364,   364,   365,   365,
   366,   367,   367,   368,   369,   369,   370,   371,   372,   372,
   373,   374,   374,   375,   375,   376,   377,   378,   378,   378,
   379,   380,   380,   381,   381,   382,   382,   382
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     0,     1,     2,     1,     3,     2,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     3,
     3,     1,     3,     8,     3,     0,     1,     0,     2,     0,
     2,     1,     0,     3,     0,     3,     7,     5,     0,     1,
     0,     2,     1,     6,     5,     0,     1,     0,     2,     1,
     5,     3,     0,     1,     0,     2,     1,     5,     4,     0,
     1,     0,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     3,     5,     0,     1,
     0,     1,     8,     0,     1,     0,     2,     1,     4,     0,
     2,     2,     7,     0,     2,     0,     1,     0,     1,     0,
     1,     1,     1,     1,     1,     1,     4,     0,     2,     2,
     4,     0,     2,     2,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
     3,     3,     3,     3,     3,     1,     2,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     1,     1,     1,     1,     1,     3,
     1,     1,     1,     1,     1,     3,     1,     1,     1,     2,
     2,     3,     3,     3,     3,     2,     5,     4,     3,     5,
     3,     4,     3,     2,     0,     1,     0,     1,     3,     1,
     2,     0,     2,     2,     1,     1,     1,     4,     0,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     4,     0,
     2,     2,     6,     0,     2,     1,     2,     4,     7,     0,
     2,     2,     3,     4,     5,     0,     2,     1,     4,     2,
     3,     5,     2,     1,     0,     1,     3,     2,     3,     0,
     1,     2,     4,     0,     2,     2,     1,     1,     1,     3,
     1,     3,     1,     1,     6,     0,     2,     7,     0,     2,
     0,     1,     6,     0,     2,     1,     1,     1,     1,     1,
     7,     8,     0,     1,     7,     2,     1,     1,     0,     2,
     2,     5,     7,     3,     2,     1,     1,     0,     2,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     4,     2,
     1,     0,     2,     1,     1,     1,     1,     1,     1,     1,
     1,    13,     0,     1,     0,     2,     1,     0,     4,     0,
     4,     0,     4,     0,     4,     0,     3,     8,     7,     0,
     3,     3,     1,     3,     1,     3,     1,     3,     1,     5,
     2,     0,     2,     4,     2,     0,     2,     2,     2,     0,
     2,     1,     1,     2,     0,     1,     0,     1,     8,     4,
     0,     2,     4,     9,     0,     1,     3,     1,     9,     0,
     1,     0,     2,     1,     0,     3,     2,     0,     2,     2,
     1,     0,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     0,     2,     0,
     2,     8,     0,     2,     1,     4,     4,     0,     2,     0,
     1,     9,     0,     2,     0,     2,     4,     8,     0,     1,
     0,     1,     0,     2,     4,     0,     2,     0,     1,     2,
     2,     3,     0,     1,     5,     0,     1,     4,     5,     0,
     2,     0,     2,     0,     2,     7,     0,     3,     0,     3,
     7,     0,     2,     1,     0,     2,     1,     1,     1,     1,
     7,     0,     1,     0,     3,     5,     3,     1,     1,     1,
     3,     0,     3,     0,     3,     2,     2,     1
};

static const short yydefact[] = {    21,
     1,    21,     3,     0,     4,     0,     0,     0,     0,     0,
     0,    20,    22,    28,    29,    23,    45,    26,    51,    24,
    58,    25,    65,    27,    72,     0,     0,     0,    18,     0,
     0,     0,   162,   203,     0,   201,     0,   202,   163,   205,
   204,     0,    43,     0,     0,     0,     0,     0,     0,    35,
     0,    30,     0,    62,     0,    31,     0,     0,   210,     0,
     0,   211,   140,     0,     0,    40,     0,     0,   352,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
    52,    88,    53,    80,     0,    89,    75,    76,    77,    95,
    79,    78,    94,    91,    92,    90,    93,     0,     0,   115,
    59,    60,   114,     0,    63,    66,    96,    67,     0,   101,
   100,    98,    99,    97,    70,    73,   102,    74,   103,     0,
     0,    19,    69,   163,   214,   212,     0,    11,     0,     0,
     0,     0,     0,     7,     8,     9,   196,    10,   152,   201,
   157,   164,   165,   166,   167,   176,   195,   163,   197,     0,
   198,   199,   289,   158,   209,     5,   208,     6,   207,   206,
   215,   213,   306,   307,   308,   130,     0,   141,    46,     0,
    38,     0,     0,     0,   351,   499,     0,   318,   317,   319,
     0,     0,   519,   520,   518,     0,     0,   119,   121,     0,
     0,   239,   126,   116,     0,   508,   505,    56,    64,     0,
    71,     0,    48,    55,   225,   224,   201,   177,   178,   179,
   180,   237,   235,     0,     0,   232,   236,    17,     0,     0,
     0,   280,   278,   294,   293,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   216,     0,
     0,     0,    44,   352,     0,    41,    82,    42,    83,    87,
    86,    84,    85,     0,     0,     0,    49,     0,   425,     0,
     0,   162,   402,   403,   353,   354,   355,   359,   356,   357,
   358,   387,     0,   389,   360,   361,   418,   383,   385,     0,
   497,     0,   316,     0,     0,     0,     0,     0,   120,   117,
   122,     0,     0,     0,     0,     0,   502,    57,     0,    61,
    68,   226,   227,   223,   200,     0,     0,   231,   151,     0,
   153,   201,   291,   282,     0,   221,   281,   279,   277,   290,
   171,   173,   175,   170,   168,   169,   172,   174,   192,   193,
   190,   188,   191,   189,   186,   187,   184,   185,   194,   182,
   183,   181,   230,   219,     0,   129,   140,   131,   138,    39,
    36,   275,     0,   274,   327,   326,   328,     0,     0,   201,
    50,     0,   450,     0,   422,     0,     0,   481,   407,     0,
     0,     0,   296,     0,   320,   201,     0,     0,     0,   528,
     0,   524,   517,     0,   301,     0,     0,     0,     0,     0,
     0,   240,   241,   243,   244,   245,   246,   247,   248,   242,
   238,   432,     0,   104,   128,   105,   127,   108,   106,   107,
   507,     0,   506,    54,   228,   222,   218,   229,     0,   233,
   154,     0,   235,     0,   132,   145,   142,   144,   146,   143,
     0,   139,    37,     0,   276,   273,     0,   325,     0,     0,
   322,    47,     0,   448,   428,     0,     0,     0,   376,     0,
     0,   201,     0,   344,   345,   386,   388,   417,   382,   384,
   408,   392,   405,   500,     0,     0,     0,     0,   321,     0,
   313,   527,   526,   516,     0,   522,   118,   309,   310,   299,
   302,   272,   270,     0,     0,     0,     0,   266,    13,    12,
   250,     0,     0,   431,     0,     0,     0,   509,   503,   504,
   510,   217,   235,   234,   292,   220,   229,   136,    34,     0,
     0,   329,     0,   332,   335,   334,   343,   331,   340,   336,
   333,   339,   341,   338,   337,   342,   324,   451,     0,     0,
   427,   426,   432,   109,   424,   110,   113,   111,   112,   423,
   402,     0,     0,   372,     0,   348,     0,     0,   352,     0,
     0,   406,   404,   498,     0,   297,   295,     0,   314,     0,
     0,     0,   521,     0,     0,   275,   260,   287,   284,   288,
     0,   201,     0,     0,     0,     0,   254,   124,     0,   460,
     0,   478,     0,   483,   494,   162,     0,   433,   434,   435,
   436,   437,   438,   439,   471,   440,   441,   442,   443,   444,
   445,   446,     0,     0,   162,   514,   137,   134,   311,   330,
   323,   449,   447,     0,   429,     0,   407,     0,     0,   368,
     0,     0,     0,     0,   390,   400,   393,   391,   396,   496,
   315,     0,     0,   525,     0,   300,   298,     0,     0,     0,
   264,     0,     0,   267,   268,   249,     0,   251,   257,     0,
   125,     0,     0,   461,   458,     0,   479,   476,   480,   484,
     0,     0,   492,   474,   486,     0,     0,   472,   346,   347,
     0,   304,   501,     0,   512,     0,   133,   430,     0,   411,
   377,     0,     0,   365,   275,   349,   380,     0,     0,     0,
   399,     0,   395,   312,   161,   148,     0,   156,   160,   195,
   523,   263,     0,     0,   261,   283,     0,   285,   269,   265,
   252,     0,     0,   255,   256,   123,     0,     0,     0,   432,
     0,     0,   482,   495,     0,   490,   487,     0,     0,   350,
   432,     0,     0,     0,   513,     0,   135,   420,     0,     0,
   374,     0,     0,     0,     0,   379,   415,   401,     0,     0,
   397,     0,     0,     0,   201,   262,   286,   253,    15,     0,
   453,   459,   457,   465,   477,   475,   493,     0,     0,     0,
   488,     0,   305,   303,   515,     0,   421,     0,   409,     0,
   412,     0,   373,   370,   352,   367,   366,     0,   378,   416,
     0,   394,   398,   147,     0,   149,   155,   259,     0,    16,
     0,     0,     0,     0,   463,   491,   489,   485,     0,     0,
   419,     0,     0,     0,   369,     0,   381,   414,   150,   258,
    14,   432,     0,   454,   455,   432,     0,     0,   466,   469,
   511,   410,     0,     0,     0,   456,     0,   464,     0,     0,
   470,     0,   413,   375,     0,   363,   452,   432,     0,   468,
   371,   364,     0,   467,   462,   362,     0,     0,     0
};

static const short yydefgoto[] = {   867,
     1,     2,   159,   137,   501,   811,   812,   138,   185,     3,
     4,    12,    13,    14,    80,    35,    16,    17,   444,   255,
   171,   256,    66,    43,    18,    19,   372,    44,    81,    20,
    21,   309,    45,   101,    22,    23,   200,    46,   106,    24,
    25,   202,    47,   116,    82,   258,    83,   108,   118,   415,
   545,   102,    84,    85,   298,   300,    86,   662,   306,   417,
    64,   251,   358,   166,   687,   618,   441,   167,   442,   644,
   762,   806,    59,   219,   321,   706,   139,   707,   708,   207,
   636,   142,   143,   144,   145,   146,   147,    38,   148,   160,
    40,    41,   149,   150,   151,   152,   314,   426,   214,   215,
   318,   430,   216,    87,   305,   402,   403,   585,   658,   404,
   660,   724,   587,   725,   405,   649,   715,   577,   406,   407,
   584,   654,   498,   408,   409,    88,   578,   446,   364,   328,
   223,   495,   650,   718,   579,   217,   580,   226,    89,   478,
    90,   575,   490,   418,   743,   168,   491,    91,    92,   570,
    93,   181,   293,   385,    94,    95,   368,   369,   448,   522,
   537,   463,   678,   464,   465,   680,   174,   175,   275,   276,
   277,   863,   753,   797,   694,   825,   630,   793,   554,   278,
   755,   279,   280,   281,   282,   560,   561,   637,   638,   703,
   761,   639,   701,   283,   472,   563,   473,   284,   749,   750,
   791,   285,   801,   286,   287,   788,   457,   550,   375,   456,
   541,   625,   503,   504,   598,   599,   288,   540,   454,   601,
   814,   834,   771,   602,   729,   665,   603,   838,   815,   839,
   604,   852,   681,   605,   606,   732,   668,   607,   289,   609,
   671,   610,   738,   611,   612,   779,   736,   673,    96,   382,
   291,   104,   422,   509,   307,   423,   197,   510,   511,   746,
   685,    97,   186,   187,   391,   573,   486,   392
};

static const short yypact[] = {-32768,
-32768,    65,-32768,   296,-32768,   -50,   -19,     6,    68,    27,
   -30,-32768,-32768,-32768,-32768,-32768,    49,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   158,   172,   196,-32768,    92,
   117,   252,-32768,-32768,   139,   266,   188,   277,   148,-32768,
-32768,   167,   265,   824,   155,   851,   467,   203,   227,-32768,
   243,-32768,   323,-32768,   -30,-32768,    14,   708,-32768,    19,
    18,-32768,   114,   264,   167,-32768,   263,   295,-32768,   311,
    68,    32,   318,    31,   163,   326,    68,   336,   344,-32768,
-32768,-32768,-32768,-32768,    57,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   359,   -30,-32768,
-32768,-32768,-32768,   407,   362,-32768,-32768,-32768,   353,-32768,
-32768,-32768,-32768,-32768,   370,-32768,-32768,-32768,-32768,   444,
   445,-32768,-32768,   257,-32768,-32768,   -30,-32768,    59,    59,
    59,    59,   679,   371,-32768,-32768,-32768,-32768,-32768,   245,
    46,   477,   437,   411,   588,   397,   188,-32768,-32768,   290,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    68,-32768,-32768,   390,
   677,   395,     4,   475,   125,   470,    75,-32768,-32768,   188,
   400,   402,-32768,-32768,   405,   434,   408,   167,   167,   284,
   473,   476,-32768,-32768,   466,   188,-32768,   409,-32768,   412,
-32768,   413,-32768,-32768,   -13,-32768,   314,-32768,-32768,-32768,
-32768,-32768,    12,   418,   415,-32768,-32768,-32768,   316,   -30,
    -1,   149,-32768,-32768,-32768,   708,   708,   708,   708,   708,
   708,   708,   708,   708,   708,   708,   708,   708,   708,   708,
   708,   708,   708,   708,   708,   708,   708,    59,-32768,   679,
   101,   297,-32768,-32768,   499,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   -30,    39,   -30,   417,   708,   428,   708,
   679,   425,   128,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   446,-32768,-32768,-32768,-32768,-32768,-32768,   167,
   480,   -30,   429,   -30,   -30,    47,   -30,   469,-32768,-32768,
-32768,   -30,   -30,    61,   432,   403,   465,-32768,   438,-32768,
-32768,   123,   146,-32768,-32768,   679,   708,   436,-32768,   708,
-32768,   143,   165,-32768,   679,-32768,   123,-32768,-32768,-32768,
   927,   927,   927,   927,   927,   927,   927,   927,   941,   941,
   941,   941,   941,   941,   256,   256,   256,-32768,-32768,-32768,
-32768,-32768,    78,-32768,   439,-32768,   114,-32768,   302,-32768,
   440,   298,   504,-32768,-32768,-32768,-32768,   514,   450,   152,
-32768,   451,   493,   -30,-32768,   494,   189,-32768,   523,   454,
   167,   534,   458,   -30,-32768,    11,   524,   -30,   -30,-32768,
   459,   532,   146,   -30,    42,   464,   -30,   472,   521,    68,
   292,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   502,
-32768,-32768,    68,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   233,-32768,-32768,   123,-32768,-32768,   474,   679,-32768,
-32768,   -30,    89,   708,-32768,-32768,-32768,-32768,-32768,-32768,
   -30,-32768,-32768,   471,   123,-32768,   -30,   483,   708,   911,
-32768,-32768,   708,   525,   188,   478,   804,    88,   486,   482,
   708,   131,   556,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   528,-32768,   488,   576,   708,   495,   188,   708,
   302,   146,   188,-32768,   559,   550,   146,-32768,-32768,   506,
-32768,-32768,-32768,   -30,   558,   -30,   308,-32768,-32768,-32768,
-32768,   498,   584,   505,   325,   581,    40,-32768,-32768,-32768,
-32768,-32768,    46,-32768,   146,-32768,-32768,   596,-32768,   237,
   163,-32768,   508,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   708,   511,
   515,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   188,   536,   708,   589,   587,-32768,   582,   583,-32768,   519,
   708,-32768,-32768,-32768,   522,-32768,-32768,   531,-32768,   708,
   529,   585,-32768,   708,   539,   272,-32768,-32768,-32768,-32768,
   -30,   229,   -30,    15,   348,   540,-32768,   163,   708,   537,
   708,   538,   545,   708,   591,   535,    -9,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    24,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   -30,   547,   341,   577,-32768,   552,-32768,-32768,
-32768,-32768,-32768,   -30,-32768,   635,   523,   562,   167,   608,
   -30,   529,   529,   640,-32768,   662,-32768,   607,-32768,-32768,
-32768,   586,   546,-32768,   529,-32768,-32768,   207,   350,   355,
-32768,   590,   628,-32768,-32768,-32768,   292,-32768,-32768,    29,
-32768,   592,   654,-32768,   616,   626,-32768,   623,-32768,-32768,
   597,   -30,   630,-32768,   639,   708,   708,-32768,-32768,-32768,
   663,   610,-32768,    47,   681,   708,-32768,   188,   656,-32768,
-32768,   612,   167,-32768,   366,-32768,   659,   613,   687,   708,
-32768,   708,   619,-32768,-32768,-32768,   620,-32768,-32768,   254,
-32768,-32768,   673,   -30,-32768,-32768,   -30,-32768,-32768,-32768,
-32768,   653,   647,-32768,-32768,-32768,   652,   708,   625,-32768,
   708,   631,-32768,-32768,   708,   701,-32768,   708,   632,-32768,
-32768,   708,   634,   637,-32768,   707,-32768,   636,   642,   708,
   702,   644,   880,   697,   645,-32768,   648,-32768,   731,   708,
-32768,   360,   546,   -30,   115,-32768,-32768,-32768,   646,   679,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   708,   657,   658,
-32768,   733,-32768,-32768,-32768,   734,-32768,   660,-32768,   684,
-32768,   726,-32768,   715,-32768,-32768,-32768,   529,-32768,-32768,
   667,-32768,-32768,-32768,   546,-32768,-32768,-32768,   670,-32768,
   669,   668,   675,    80,   443,-32768,-32768,-32768,   740,   678,
-32768,   679,   529,   741,-32768,   760,-32768,-32768,-32768,-32768,
-32768,-32768,   767,-32768,-32768,-32768,   708,   761,-32768,   688,
-32768,   692,   694,   529,   783,-32768,   695,-32768,   735,   766,
-32768,   704,-32768,-32768,   709,   696,-32768,-32768,   718,-32768,
-32768,-32768,   719,-32768,-32768,-32768,   801,   806,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   -67,-32768,   168,-32768,-32768,-32768,    -8,   810,
-32768,-32768,-32768,-32768,    17,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -28,-32768,    73,-32768,-32768,-32768,
-32768,-32768,-32768,   781,-32768,-32768,   -38,-32768,-32768,-32768,
   -63,-32768,-32768,   481,-32768,-32768,-32768,-32768,   347,  -606,
-32768,-32768,   -31,-32768,-32768,    25,   513,-32768,    74,   -11,
     9,-32768,-32768,-32768,   759,   -81,     5,-32768,   164,-32768,
-32768,  -209,  -165,-32768,   712,-32768,-32768,-32768,  -195,  -245,
-32768,-32768,   414,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   126,-32768,-32768,
-32768,-32768,   267,-32768,-32768,-32768,  -260,-32768,   -55,-32768,
  -186,-32768,-32768,-32768,  -600,   -25,  -208,  -300,-32768,-32768,
   -18,-32768,-32768,   384,-32768,-32768,-32768,-32768,-32768,-32768,
   -17,-32768,-32768,-32768,   -16,   -32,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   242,-32768,  -248,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   484,-32768,-32768,-32768,  -663,-32768,
-32768,    90,-32768,  -296,   221,-32768,-32768,   487,-32768,-32768,
-32768,-32768,-32768,-32768,   489,-32768,-32768,-32768,-32768,   177,
-32768,-32768,  -526,-32768,-32768,-32768,  -357,-32768,-32768,-32768,
-32768,-32768,    41,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -354,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   811,-32768,
-32768,  -398,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   351,-32768,   175,-32768,-32768,-32768
};


#define	YYLAST		1034


static const short yytable[] = {    36,
    30,   170,   153,   363,   355,   360,    62,   188,   119,   274,
   323,   324,   103,   113,   480,    37,   626,   107,   117,   469,
    15,   432,   470,   508,   155,   697,   698,   110,   111,   112,
   696,   383,   154,   224,   387,   329,   183,   178,   711,   653,
    31,   395,   396,    36,   365,   183,   140,   208,   209,   210,
   211,   265,   460,   722,   354,   326,   125,   488,    26,    37,
    36,   100,   177,   397,    -2,   388,   141,   224,   190,   398,
   355,   125,   389,   675,   780,   161,   180,   153,    33,   225,
    42,    34,   184,   179,   221,    58,   790,    36,   399,    27,
   366,   184,   676,   193,  -201,    33,   390,   325,    34,   224,
   677,   489,   127,   196,   833,   128,   266,   126,    57,    58,
   224,   315,  -230,   225,    28,   205,   767,   410,   220,   400,
   427,   140,   126,    29,   299,   301,   162,   156,   222,   157,
   158,    37,   259,   163,   268,    32,   493,   723,   263,    29,
    33,   213,   257,    34,    37,   225,   600,   156,   615,   608,
   158,    34,   260,   261,   262,   770,   225,   133,   252,   401,
   194,   552,   557,    36,   224,    98,   352,    33,   134,   135,
    34,   136,   809,   312,    39,    51,    29,   292,   164,   273,
   518,   269,  -235,    99,  -235,   558,   271,   165,   516,  -230,
   327,   827,    51,   313,   153,    52,    33,   367,   268,    34,
   356,   459,   270,   774,   357,    48,   220,   597,   322,    37,
   225,   274,    57,    58,   782,   153,   843,   460,   124,    49,
  -210,  -210,   461,   271,    37,    53,   380,    11,    57,    58,
  -210,   378,    50,   272,   330,    60,    34,   855,   140,    55,
    57,    58,    56,    57,    58,   269,    57,    58,   -32,    57,
    58,   -32,   362,  -201,   370,   451,  -201,   506,   353,   140,
   153,   507,  -204,  -204,   153,    63,   270,   416,    37,   153,
    37,   156,  -204,   420,   158,   432,   373,   414,   376,   353,
   362,   425,   386,   362,   323,   393,   745,   271,    54,   419,
   362,   362,   274,   224,   154,    60,    37,    33,    37,    37,
    34,    37,   220,     6,   140,   846,    37,    37,   140,   848,
   634,   120,   712,   140,     7,    33,   436,   475,    34,    65,
   651,     8,   652,   421,   353,   428,    57,    58,   141,   648,
   445,   864,  -271,   433,     9,   121,   437,   438,   274,   225,
   619,   439,   221,    58,    60,   244,   245,   246,   247,    10,
   222,   122,   682,    33,   440,   220,    34,   -33,  -159,   123,
   -33,    60,    36,    57,    58,   462,    37,   169,    11,    57,
    58,   172,    36,   153,    61,    58,   482,    36,   455,  -201,
    33,   273,   487,    34,    51,   362,   302,   224,   479,   249,
   250,   497,    37,   483,   432,    57,    58,    51,    37,   359,
   499,    37,   500,   173,   505,  -201,    33,    67,    51,    34,
   583,   221,    58,    68,   412,   319,   320,   140,   546,   176,
   515,   323,    71,   220,   549,    51,   182,   613,   544,   362,
    73,   198,    75,   225,   189,    36,    37,   513,   323,   324,
   548,   -18,   517,   -18,   191,    37,    36,   656,   657,   713,
   714,   520,   192,   620,   716,   717,   194,   523,    76,   804,
   805,   538,   551,    57,    58,   836,   837,   195,    78,   556,
   199,    67,    79,  -201,    33,    11,   413,    34,   201,   218,
   203,   204,   576,   227,   582,   566,    71,   228,   568,   229,
   248,   115,    36,   253,    73,    36,    75,   264,    37,   267,
    37,   290,   294,   808,   295,    51,   296,   323,   273,   303,
   297,   196,   304,   265,   268,   310,   311,   308,   316,   317,
   661,   589,    76,   361,   813,   371,   374,   377,   379,   384,
   394,   590,    78,  -473,   381,   411,    79,    11,   591,    11,
   447,   424,   429,   434,   445,  -473,   826,   622,   443,   592,
   449,   593,   450,   453,   452,   471,   458,   474,   476,   477,
   481,   628,   484,   485,   222,   692,   594,   492,   496,   362,
   494,   362,   502,   512,   519,   497,   842,   542,   642,   595,
    37,  -473,   646,   521,   553,    37,   559,    37,   539,   127,
   555,   564,   128,   565,   230,   705,   562,   663,   567,   666,
   571,   362,   670,   271,   572,   581,   586,   574,   588,   614,
   617,   621,    36,   596,   623,   624,    34,    37,   627,   695,
   629,   631,   635,   632,   633,   640,   645,   643,   688,   752,
   231,   129,   130,   232,   641,    37,   322,   674,   233,   672,
   131,   132,   647,   659,   133,   664,   667,   710,   669,   684,
   683,   709,    37,   686,    33,   134,   135,    34,   136,   689,
    36,   691,   693,   445,   699,   700,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   455,   244,   245,   246,
   247,    67,   702,   222,   739,   740,   720,    68,   254,   704,
   727,   728,   730,   719,   747,   726,    71,    72,   731,    37,
   733,   735,   765,   741,    73,   695,    75,   737,   758,    99,
   759,   742,   748,   754,   153,   751,   756,   757,    37,   760,
   764,    37,   127,   768,   763,   128,   769,   770,   773,   778,
   212,   786,    76,   792,   776,   781,   772,   784,   798,   775,
   785,    77,    78,   777,   787,   789,    79,   794,   799,    11,
   783,   127,   362,   802,   128,   810,   800,   819,   140,   822,
   817,   818,   820,   821,   129,   130,   153,   823,    37,   824,
   828,   709,   830,   131,   132,   712,   831,   133,   513,   832,
   840,   841,   844,   847,   845,   850,   816,    33,   134,   135,
    34,   136,   853,   129,   130,   856,   851,   854,   857,   859,
   868,   858,   131,   132,   862,   869,   133,   860,    67,   710,
   140,     5,   861,   709,    68,   543,    33,   134,   135,    34,
   136,   865,   866,    71,   721,   796,   109,   569,    67,   829,
   513,    73,   431,    75,    68,    69,   807,   435,   206,   766,
   547,    70,   514,    71,    72,   849,   679,   690,   734,   803,
   655,    73,    74,    75,   835,    67,   114,   616,   744,    76,
   466,    68,     0,   467,     0,   468,     0,     0,    70,    78,
    71,    72,     0,    79,     0,   105,    11,   413,    73,    76,
    75,     0,     0,     0,    67,     0,     0,     0,    77,    78,
    68,   795,     0,    79,     0,     0,    11,    70,     0,    71,
    72,     0,     0,     0,     0,     0,    76,    73,    74,    75,
     0,     0,     0,     0,     0,    77,    78,     0,   524,     0,
    79,     0,     0,    11,     0,     0,     0,     0,   525,   526,
   527,     0,     0,     0,     0,    76,   528,     0,     0,     0,
   529,     0,     0,     0,    77,    78,     0,     0,   530,    79,
     0,     0,    11,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   531,     0,   532,     0,     0,     0,
     0,     0,     0,     0,     0,   533,   534,     0,     0,     0,
   535,     0,     0,     0,   536,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   235,   236,   237,   238,
   239,   240,   241,   242,   243,     0,   244,   245,   246,   247,
-32768,-32768,-32768,-32768,-32768,-32768,   241,   242,   243,     0,
   244,   245,   246,   247
};

static const short yycheck[] = {    11,
     9,    65,    58,   264,   250,   254,    38,    75,    47,   175,
   220,   220,    45,    46,     4,    11,   543,    46,    47,   377,
     4,   322,   377,   422,     6,   632,   633,    46,    46,    46,
   631,   292,    58,    22,   295,   222,     6,     6,   645,    25,
    14,   302,   303,    55,     6,     6,    58,   129,   130,   131,
   132,    48,    29,    25,   250,   221,    58,    16,   109,    55,
    72,    45,    71,     3,     0,    19,    58,    22,    77,     9,
   316,    58,    26,    83,   738,    58,    72,   133,   109,    68,
    32,   112,    52,    52,    98,    99,   750,    99,    28,   109,
    52,    52,   102,    37,   108,   109,    50,    99,   112,    22,
    77,    60,    44,    99,    25,    47,   103,   109,    98,    99,
    22,   100,   101,    68,   109,   127,   717,   304,    58,    59,
   316,   133,   109,   109,   188,   189,   109,   109,   140,   111,
   112,   127,   171,    20,    10,   109,   397,   109,   171,   109,
   109,   133,   171,   112,   140,    68,   504,   109,   109,   504,
   112,   112,   171,   171,   171,    76,    68,    99,   167,    99,
   104,   458,    32,   175,    22,    11,   248,   109,   110,   111,
   112,   113,    58,   205,    11,   101,   109,   103,    65,   175,
   441,    57,   105,    29,   107,    55,    99,    74,   100,   101,
   222,   798,   101,   205,   250,   104,   109,   265,    10,   112,
   100,    13,    78,   730,   104,    48,    58,   504,   220,   205,
    68,   377,    98,    99,   741,   271,   823,    29,    55,    48,
    98,    99,    34,    99,   220,   109,   290,    73,    98,    99,
   108,   104,    37,   109,   226,   108,   112,   844,   250,   101,
    98,    99,   104,    98,    99,    57,    98,    99,   101,    98,
    99,   104,   264,   108,   266,   104,   108,    25,   250,   271,
   316,    29,    98,    99,   320,    99,    78,   306,   264,   325,
   266,   109,   108,   306,   112,   576,   268,   306,   270,   271,
   292,   313,   294,   295,   494,   297,   685,    99,    37,   306,
   302,   303,   458,    22,   320,   108,   292,   109,   294,   295,
   112,   297,    58,     8,   316,   832,   302,   303,   320,   836,
   559,   109,   106,   325,    19,   109,    15,   381,   112,    55,
   581,    26,   583,   307,   316,   317,    98,    99,   320,    58,
   362,   858,   104,   325,    39,   109,    35,    36,   504,    68,
   104,    40,    98,    99,   108,    90,    91,    92,    93,    54,
   362,   109,   613,   109,    53,    58,   112,   101,   105,    37,
   104,   108,   374,    98,    99,   377,   362,   104,    73,    98,
    99,   109,   384,   429,    98,    99,   388,   389,   374,   108,
   109,   377,   394,   112,   101,   397,   103,    22,   384,   100,
   101,   400,   388,   389,   695,    98,    99,   101,   394,   103,
   109,   397,   111,   109,   413,   108,   109,     5,   101,   112,
   103,    98,    99,    11,    12,   100,   101,   429,   457,   109,
   432,   631,    20,    58,   457,   101,   109,   103,   457,   441,
    28,    25,    30,    68,   109,   447,   432,   429,   648,   648,
   457,   101,   434,   103,   109,   441,   458,   100,   101,   100,
   101,   447,   109,   521,   100,   101,   104,   449,    56,   100,
   101,   453,   458,    98,    99,    23,    24,   109,    66,   461,
   109,     5,    70,   108,   109,    73,    74,   112,   109,   109,
    37,    37,   494,     7,   496,   477,    20,    51,   480,    79,
    94,    25,   504,   104,    28,   507,    30,   103,   494,    25,
   496,    32,   103,   764,   103,   101,    73,   717,   504,    37,
   103,   507,    37,    48,    10,   104,   104,   109,   101,   105,
   588,    17,    56,    25,   770,   109,    99,   103,    83,   101,
    62,    27,    66,    29,    55,   104,    70,    73,    34,    73,
    37,   104,   107,   105,   576,    41,   795,   539,   109,    45,
    37,    47,   103,    61,   104,    33,    63,   104,    25,   102,
    37,   553,   104,    32,   576,   629,    62,   104,    48,   581,
    99,   583,    71,   100,   104,   584,   822,   100,   570,    75,
   576,    77,   574,   101,    99,   581,    31,   583,    64,    44,
   109,   104,    47,    18,     7,    50,    69,   589,   104,   591,
    42,   613,   594,    99,    55,    48,   109,   102,    25,    29,
    15,   104,   624,   109,   104,   101,   112,   613,    83,   631,
    32,    35,   104,    42,    42,   104,    42,    99,   624,   693,
    43,    86,    87,    46,   104,   631,   648,   103,    51,    49,
    95,    96,   104,   104,    99,   109,   109,   643,   104,    73,
   104,   643,   648,   102,   109,   110,   111,   112,   113,    25,
   672,   100,    55,   695,    25,     4,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,   672,    90,    91,    92,
    93,     5,    76,   695,   676,   677,    59,    11,    12,   104,
    37,    76,    67,   104,   686,   104,    20,    21,    76,   695,
   104,    72,   714,    41,    28,   717,    30,    69,   700,    29,
   702,   102,    57,    55,   770,   104,   104,    31,   714,   101,
    48,   717,    44,    71,   105,    47,    80,    76,   104,    29,
    52,    25,    56,    32,   104,   104,   728,   104,    42,   731,
   104,    65,    66,   735,   109,   104,    70,   104,   104,    73,
   742,    44,   764,    23,    47,   110,   109,    25,   770,    76,
   104,   104,    29,   104,    86,    87,   822,    42,   764,    55,
   104,   763,   104,    95,    96,   106,   109,    99,   770,   105,
    41,   104,    42,    17,    25,    25,   778,   109,   110,   111,
   112,   113,   101,    86,    87,    13,   109,   104,   104,    34,
     0,    67,    95,    96,   109,     0,    99,   104,     5,   805,
   822,     2,   104,   805,    11,    12,   109,   110,   111,   112,
   113,   104,   104,    20,   657,   753,    46,   481,     5,   805,
   822,    28,   320,    30,    11,    12,   763,   357,   127,   714,
   457,    18,   429,    20,    21,   837,   605,   627,   672,   760,
   584,    28,    29,    30,   814,     5,    46,   507,   684,    56,
   377,    11,    -1,   377,    -1,   377,    -1,    -1,    18,    66,
    20,    21,    -1,    70,    -1,    25,    73,    74,    28,    56,
    30,    -1,    -1,    -1,     5,    -1,    -1,    -1,    65,    66,
    11,    12,    -1,    70,    -1,    -1,    73,    18,    -1,    20,
    21,    -1,    -1,    -1,    -1,    -1,    56,    28,    29,    30,
    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,     8,    -1,
    70,    -1,    -1,    73,    -1,    -1,    -1,    -1,    18,    19,
    20,    -1,    -1,    -1,    -1,    56,    26,    -1,    -1,    -1,
    30,    -1,    -1,    -1,    65,    66,    -1,    -1,    38,    70,
    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    54,    -1,    56,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
    70,    -1,    -1,    -1,    74,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    -1,    90,    91,    92,    93,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
    90,    91,    92,    93
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */


/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
{
            // format extracted IP 
            format_ip(); 
        ;
    break;}
case 18:
{   // defines signal's output
            // support only one signal for the moment 
            if (is_in_entity)
                temp_signal->name  = temp_token ; 
        ;
    break;}
case 35:
{
            entity_start_action ();
;
    break;}
case 48:
{
            // get architecture name
            printf ("hello"); 
        ;
    break;}
case 133:
{
            // endof signal decl
            // push temp signal
            conv_main_ip->entity->list_bus.push_back (temp_signal); 
        ;
    break;}
case 140:
{   fprintf (trace_file,"\n\t;interf_element_1  :  \n");   // startof entity signal decl 
            temp_signal = new XhdlSignal (conv_main_ip);
        ;
    break;}
case 142:
{
            temp_signal->direction = "IN";
        ;
    break;}
case 143:
{
            temp_signal->direction = "OUT";
        ;
    break;}
case 170:
{ 
            relation_BOOL_relation ("AND");
;
    break;}
case 171:
{ 
            relation_BOOL_relation ("AND");
;
    break;}
case 172:
{ 
            relation_BOOL_relation ("OR");
;
    break;}
case 173:
{ 
            relation_BOOL_relation ("OR");
;
    break;}
case 181:
{ 
            relation_BOOL_relation ("**");
;
    break;}
case 182:
{ 
            relation_BOOL_relation ("MOD");
;
    break;}
case 183:
{ 
            relation_BOOL_relation ("REM");
;
    break;}
case 184:
{ 
            relation_BOOL_relation ("&");
;
    break;}
case 185:
{ 
            relation_BOOL_relation ("*");
;
    break;}
case 186:
{ 
            relation_BOOL_relation ("+");
;
    break;}
case 187:
{ 
            relation_BOOL_relation ("*");
;
    break;}
case 188:
{ 
            relation_BOOL_relation ("<=");
;
    break;}
case 189:
{ 
            relation_BOOL_relation (">=");
;
    break;}
case 190:
{ 
            relation_BOOL_relation ("<");
;
    break;}
case 191:
{ 
            relation_BOOL_relation (">");
;
    break;}
case 192:
{ 
            relation_BOOL_relation ("=");
;
    break;}
case 193:
{ 
            relation_BOOL_relation ("!=");
;
    break;}
case 194:
{ 
            relation_BOOL_relation ("/");
;
    break;}
case 195:
{
            push_name();
;
    break;}
case 273:
{   // fprintf (trace_file,"\n\t;subtype_indic   : mark subtype_indic_1  \n"); 
            if (is_in_entity)
            {
                current_signal_is_bit = true;
                // temp_signal->type = temp_token + temp_signal->type; 
            }
        ;
    break;}
case 275:
{
            // std_logic type. 
            fprintf (trace_file,"\n\t;discrete_range1 : subtype_indic1    	\n");
            temp_signal->type = "STD_LOGIC"; 
            temp_signal->is_bit = true;
        ;
    break;}
case 276:
{fprintf (trace_file,"\n\t;subtype_indic_1 : gen_association_list  \n"); ;
    break;}
case 290:
{
            fprintf (trace_file,"\n\t;discrete_range1 : expr direction expr  \n");
            temp_signal->type =  "STD_LOGIC_VECTOR ( "; 
            temp_signal->type += temp_signal_hig_val ;
            temp_signal->type +=  " DOWNTO "; 
            temp_signal->type += temp_token; 
            temp_signal->type +=  " )"; 

            temp_signal->high_val = atoi (temp_signal_hig_val.c_str());
            temp_signal->low_val = atoi (temp_token.c_str());
            temp_signal->is_bit = false;
        ;
    break;}
case 291:
{    // fprintf (trace_file,"\n;range_spec  : attribute_name   \n" );
            // fprintf (trace_file,"hello"); 
        ;
    break;}
case 292:
{  fprintf (trace_file,"\n\t;range_spec  : mark direction mark  \n" );
            // temp_signal->type += " "; 
            // temp_signal->type += temp_token; 
            // temp_signal->type += " )  "; 
        ;
    break;}
case 293:
{   fprintf (trace_file,"\n\t;direction  : t_TO \n" );
            current_signal_is_bit = false;
            temp_signal_hig_val = temp_token;  
        ;
    break;}
case 294:
{   fprintf (trace_file,"\n\t;direction  : t_DOWNTO \n" );
            current_signal_is_bit = false;
            temp_signal_hig_val = temp_token;  
        ;
    break;}
case 402:
{
            target_action (); 
;
    break;}
case 431:
{
            seq_stats_action () ; 
;
    break;}
case 434:
{
            seq_stats_action () ; 
;
    break;}
case 485:
{
            signal_assign_stat_action () ; 
;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}

extern FILE* yyout;

/************************************************************
* RESOLVED BUGS
* J.Gaisler reported:
*       Range attributes in FOR loops are not supported 
*	Unary minus not supported in second argument to relational exp. 
* Thorsten Groetker
*	precedence and associtivity of operators
*	(formal=>actual) was permitted in gen_associatin_list
*		and thus in subtype_indic e.g. 
*************************************************************
* OTHER KNOWN PROBLEMS:
* the grammar allows expressions: 3*-5 thats pretty nice but illegal 
* in VHDL - only 3*(-5) is permitted from LRM.
*************************************************************/
